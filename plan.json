{"format_version":"1.2","terraform_version":"1.6.2","variables":{"cli-template-project-variables":{"value":["lan_ip_edu","lan_ip_fin","mpls_wan_ip","hostname","profile","region","loopback","mpls_wan_gateway","inbandwidth","shaping_profile","outbandwidth"]},"createADOM":{"value":true},"createDevice":{"value":true},"deviceInfo":{"value":{"adm_pass":"","adm_usr":"admin","name":"authByTerraform","platform_str":"FortiGate-VM64-KVM","sn":"FGVMEVDNB1HFA86B"}},"pkg":{"value":"managedByTerraform"},"resource_tags":{"value":{"environment":"dev","owner":"ghaith.almujalled@eviny.no","project":"project-alpha"}},"workingADOM":{"value":"createdByTerraform"}},"planned_values":{"root_module":{"resources":[{"address":"fortimanager_dvm_cmd_add_device.authDevice","mode":"managed","type":"fortimanager_dvm_cmd_add_device","name":"authDevice","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"device":[{"adm_usr":"admin","authorizationtemplate":null,"desc":null,"deviceaction":"promote_unreg","deviceblueprint":null,"fazquota":null,"ip":null,"metafields":null,"metafields_map":null,"mgmt_mode":null,"mr":null,"name":"authByTerraform","os_type":null,"os_ver":null,"patch":null,"platform_str":"FortiGate-VM64-KVM","sn":"FGVMEVDNB1HFA86B"}],"dynamic_sort_subtable":"false","flags":["create_task"],"fmgadom":"createdByTerraform","groups":[]},"sensitive_values":{"device":[{}],"flags":[false],"groups":[]}},{"address":"fortimanager_dvmdb_adom.manageADOM","mode":"managed","type":"fortimanager_dvmdb_adom","name":"manageADOM","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"desc":null,"flags":["no_vpn_console"],"lock_override":null,"log_db_retention_hours":1440,"log_disk_quota":51200,"log_disk_quota_alert_thres":90,"log_disk_quota_split_ratio":70,"log_file_retention_hours":8760,"metafields":null,"mig_mr":4,"mig_os_ver":"0.0","mode":"gms","mr":4,"name":"createdByTerraform","os_ver":"7.0","restricted_prds":["fos"],"state":1,"workspace_mode":1},"sensitive_values":{"flags":[false],"restricted_prds":[false]}},{"address":"fortimanager_exec_workspace_action.lockADOM","mode":"managed","type":"fortimanager_exec_workspace_action","name":"lockADOM","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"action":"lockbegin","adom":"createdByTerraform","comment":"","param":"","scopetype":"adom","target":""},"sensitive_values":{}},{"address":"fortimanager_exec_workspace_action.unlockADOM","mode":"managed","type":"fortimanager_exec_workspace_action","name":"unlockADOM","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"action":"lockend","adom":"createdByTerraform","comment":"","param":"","scopetype":"adom","target":""},"sensitive_values":{}},{"address":"fortimanager_json_generic_api.updateDeviceDB","mode":"managed","type":"fortimanager_json_generic_api","name":"updateDeviceDB","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"comment":null,"force_recreate":null,"id":"JSONRPC-Requst-16aab421-780d-478a-8a85-a1358dc650b2","json_content":"{\n  \"method\": \"update\",\n  \"params\": [\n    {\n      \"data\": {\n        \"adm_pass\": \"\",\n        \"adm_usr\": \"admin\",\n        \"desc\": \"This is updated from Terrafrom using an API!\",\n        \"latitude\": 60.37309404359674,\n        \"longitude\": 5.33920881412722,\n        \"meta fields\": {\n          \"Address\": \"Fj√∏sangerveien 65\",\n          \"Company/Organization\": \"Eviny Digital AS\",\n          \"Contact Email\": \"ghaith.almujalled@verja.no\",\n          \"Contact Phone Number\": \"+4745402619\"\n        },\n        \"name\": \"authByTerraform\"\n      },\n      \"url\": \"/dvmdb/adom/createdByTerraform/device/FortiGate-VM64-KVM\"\n    }\n  ]\n}\n","response":"{ \"result\": [ { \"data\": { \"name\": \"authByTerraform\" }, \"status\": { \"code\": 0, \"message\": \"OK\" }, \"url\": \"\\/dvmdb\\/adom\\/createdByTerraform\\/device\\/FortiGate-VM64-KVM\" } ] }"},"sensitive_values":{}},{"address":"fortimanager_object_cli_template.Edge-Overlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Edge-Overlay","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"02-Edge-Overlay","modification_time":"","name":"02-Edge-Overlay","provision":"","scopetype":"adom","script":"{# 02-Edge-Overlay.j2                                                         #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n\n{% for h in project.regions[region].hubs %}\n{% set hubloop = loop %}\n{% set ol_tunnels = [] %}\n{% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\n  {# Track generated tunnels, to handle duplicates by adding extra index as a suffix #}\n  {% set ul_name = i.ul_name~\"-\" if i.ul_name is defined else \"\" %}\n  {% set ol_tun = ul_name~\"H\"~hubloop.index~\"_\"~i.ol_type %}\n  {% set count = ol_tunnels|select(\"equalto\", ol_tun)|list|count %}\n  {# Tunnel name = 'H\u003chub_number\u003e_\u003col_type\u003e' if no duplicates, otherwise 'H\u003chub_number\u003e_\u003col_type\u003e_\u003cindex\u003e' #}\n  {% set ol_tun_name = ol_tun if not count else ol_tun~'_'~(count+1) %}\n  {{ ol_tunnels.append(ol_tun) or \"\" }}\nconfig vpn ipsec phase1-interface\n  edit \"{{ ol_tun_name }}\"\n    set interface \"{{ i.name }}\"\n    set ike-version 2\n    {% if project.cert_auth|default(true) %}\n    set authmethod signature\n    set certificate \"{{ project.edge_cert_template|default('Edge') }}\"\n    {% else %}\n    set psksecret {{ project.psk|default('S3cr3t!') }}\n    {% endif %}\n    set keylife 28800\n    set peertype any\n    set net-device enable\n    set proposal aes256gcm-prfsha256 aes256-sha256\n    set idle-timeout enable\n    {% if project.intrareg_advpn|default(true) %}\n    set auto-discovery-receiver enable\n    set add-route disable\n    {% else %}\n    set auto-discovery-receiver disable    \n    set exchange-interface-ip enable\n    {% endif %}    \n    set encapsulation vpn-id-ipip\n    set exchange-ip-addr4 {{ loopback|ipaddr('address') }}\n    set network-overlay enable\n    set network-id {{ project.hubs[h].overlays[i.ol_type].network_id }}\n    set remote-gw {{ project.hubs[h].overlays[i.ol_type].wan_ip }}\n    set dpd-retrycount 3\n    set dpd-retryinterval 5\n    set dpd on-idle\n  next\nend\nconfig vpn ipsec phase2-interface\n  edit \"{{ ol_tun_name }}\"\n    set phase1name \"{{ ol_tun_name }}\"\n    set proposal aes256gcm\n    set keepalive enable\n    set keylifeseconds 3600\n  next\nend\nconfig system interface\n  edit \"{{ ol_tun_name }}\"\n    set vrf {{ pe_vrf }}\n  next\nend\n{% endfor %}\n{% endfor %}\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false]}},{"address":"fortimanager_object_cli_template.Edge-Routing","mode":"managed","type":"fortimanager_object_cli_template","name":"Edge-Routing","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"03-Edge-Routing","modification_time":"","name":"03-Edge-Routing","provision":"","scopetype":"adom","script":"{# 03-Edge-Routing.j2                                                         #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_rt_as = project.vrf_rt_as|default('65000') %}\n\nconfig router route-map\n  {% for i in range(1,3) %}\n  edit \"H{{loop.index}}_TAG\"\n    config rule\n      edit 1\n        set set-tag {{ loop.index }}\n      next\n    end\n  next\n  {% endfor %}\n  edit \"SLA_OK\"\n    config rule\n      edit 1\n        set set-community \"{{ project.regions[region].as }}:99\"\n      next\n    end\n  next\nend\n\nconfig router bgp\n  set as {{ project.regions[region].as }}\n  set router-id {{ loopback|ipaddr('address') }}\n  set keepalive-timer 15\n  set holdtime-timer 45\n  set ibgp-multipath enable\n  set recursive-next-hop enable\n  set tag-resolve-mode merge\n  config neighbor\n    {% for h in project.regions[region].hubs %}\n    edit {{ project.hubs[h].lo_bgp }}\n      set soft-reconfiguration enable\n      set soft-reconfiguration-vpnv4 enable\n      set advertisement-interval 1\n      set interface \"Lo\"\n      set update-source \"Lo\"\n      set connect-timer 1\n      set remote-as {{ project.regions[region].as }}\n      set route-map-in \"H{{loop.index}}_TAG\"\n      set route-map-in-vpnv4 \"H{{loop.index}}_TAG\"\n      set route-map-out-vpnv4-preferable \"SLA_OK\"\n    next\n    {% endfor %}\n  end\n  config network\n    {% set network_to_advertise = [] %}\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined and i.advertise|default(true) %}\n      {% if not i.ip in network_to_advertise %}\n        {{ network_to_advertise.append(i.ip) or \"\" }}\n      {% endif %}\n    {% endfor %}\n\n    {% for i in network_to_advertise if i|length %}\n      edit {{ loop.index }}\n        set prefix {{ i|ipaddr(0) }}\n      next\n    {% endfor %}\n    end\n  config vrf\n    edit \"{{ pe_vrf }}\"\n      set role pe\n    next\n    {% for i in project.profiles[profile].interfaces if i.vrf is defined and i.name is defined %}\n    edit \"{{ i.vrf }}\"\n      set role \"ce\"\n      set rd \"{{ vrf_rt_as }}:{{ i.vrf }}\"\n      set import-rt \"{{ vrf_rt_as }}:{{ i.vrf }}\"\n      set export-rt \"{{ vrf_rt_as }}:{{ i.vrf }}\"\n    next\n    {% endfor %}\n  end\nend\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false]}},{"address":"fortimanager_object_cli_template.Edge-Underlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Edge-Underlay","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"01-Edge-Underlay","modification_time":"","name":"01-Edge-Underlay","provision":"","scopetype":"adom","script":"{# 01-Edge-Underlay.j2                                                        #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_leak_summary = project.vrf_leak_summary|default('10.200.255.0/24') %}\n\n{# General settings #}\nconfig system settings\n  set location-id {{ loopback|ipaddr('address') }}\n  set allow-subnet-overlap enable\nend\nconfig system global\n  {% if not project.profiles[profile].ha|default(false) and hostname is defined %}\n  set hostname {{ hostname }}\n  {% endif %}\nend\n\n{# Loop: Configure underlay interfaces #}\n{% for i in project.profiles[profile].interfaces if i.name is defined %}\nconfig system interface\n  edit \"{{i.name}}\"\n    {# IP #}\n    {% if i.ip is defined %}\n    {% if i.ip == 'dhcp' %}\n    set mode dhcp\n    {%  else %}\n    set mode static\n    set ip {{ i.ip }}\n    {% endif %}\n    {% endif %}\n\n    {# VRF #}\n    {% if i.vrf is defined %}\n    set vrf {{ i.vrf }}\n    {% else %}\n    set vrf {{ pe_vrf }}\n    {% endif %}\n\n    {# VLAN #}\n    {% if i.vlanid is defined and i.parent is defined %}\n    set vdom \"root\"\n    set type vlan\n    set vlanid {{ i.vlanid }}\n    set interface {{ i.parent }}\n    {% endif %}\n\n    {# FEX #}\n    {% if i.fex|default(false) %}\n    set type fext-wan\n    {% endif %}       \n\n    {# QoS: Add shaping profile and in/outbandwidth only if interface is of type wan and meta fields are both defined #}\n    {% if i.role == 'wan' and i.outbandwidth is defined %}\n    set estimated-upstream-bandwidth {{ i.outbandwidth }}\n      {% if i.shaping_profile is defined %}\n      set outbandwidth {{ i.outbandwidth }}\n      set egress-shaping-profile {{ i.shaping_profile }}\n      {% endif %}\n    {% endif %}\n    {% if i.role == 'wan' and i.inbandwidth is defined %}\n    set estimated-downstream-bandwidth {{ i.inbandwidth }}\n      {% if i.shaping_profile is defined %}\n      set inbandwidth {{ i.inbandwidth }}\n      set ingress-shaping-profile {{ i.shaping_profile }}\n      {% endif %}\n    {% endif %}\n\n    {# Other settings #}\n    {% if i.role == 'wan' %}\n    set role wan\n    {% endif %}\n    {% if i.role == 'lan' %}\n    set role lan\n    set device-identification enable\n    {% endif %}\n    set allowaccess {{ 'ping' if not i.access|default(false) else i.access }}\n  next\nend\n\n{# Configure FEX parent interface #}\n{% if i.fex|default(false) %}\nconfig system interface\n  edit {{ i.parent }}\n    set mode dhcp\n    set allowaccess ping fabric\n    set monitor-bandwidth enable\n    set role wan\n    unset lldp-reception      \n  next\nend\n{% endif %}\n\n{# VRF Leak #}\n{% if i.vrf is defined and i.allow_dia|default(false) %}\n  {# Configure software vdom-link interface if model is VM #}\n  {% if i.leak_npu_link|default('') == '' %}\n  config system vdom-link\n    edit \"vrf{{ i.vrf }}_leak\"\n    next\n  end\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vdom-link\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vdom-link\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {# Configure vlan interfaces on top of npu link if model is HW #}\n  {% else %}\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}0\"\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}1\"\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {% endif %}\n\n  {# Add default route to pe_vrf for each vrf #}\n  config router static\n    edit {{ 10000 + i.vrf }}\n      set gateway {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}\n      set device vrf{{ i.vrf }}_leak1\n    next\n  end\n\n  {# Configure a zone for easier policy management of vrf leaking #}\n  {% if project.create_vrf_leak_zone|default(true) and i.role == 'lan' %}\n  config system zone\n    edit \"{{ project.pevrf_leak_zone|default('pevrf_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak0\"\n    next\n    edit \"{{ project.vrf_leak_zone|default('vrfs_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak1\"\n    next\n  end\n  {% endif %}\n{% endif %}\n\n{# End Loop: Configure underlay interfaces #}\n{% endfor %}\n\n{# Main Loopback #}\nconfig system interface\n  edit \"Lo\"\n    set vdom \"root\"\n    set type loopback\n    set vrf {{ pe_vrf }}\n    set ip {{ loopback|ipaddr('address') }}/32\n    set allowaccess ping\n  next\nend\n\n{# Create LAN Zone #}\n{% set lan_intf = [] %}\n{% if project.create_lan_zone|default(true) %}\nconfig system zone\n  edit \"{{ project.lan_zone|default('lan_zone') }}\"\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n    {{  lan_intf.append(i.name) or \"\" }}\n    {% endfor %}\n    set interface {{ lan_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Support SD-Branch (Fortilink interface) #}\n{% set fortilink_intf = [] %}\n{% for i in project.profiles[profile].interfaces if i.role == 'sd_branch' and i.name is defined %}\n{{  fortilink_intf.append(i.name) or \"\" }}\n{% endfor %}\n{% if fortilink_intf %}\nconfig system global\n  set switch-controller enable\nend\nconfig system interface\n  edit \"fortilink\"\n    set member {{ fortilink_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Enable DHCP Server on LAN interfaces #}\n{% if project.create_lan_dhcp_server|default(true) %}\nconfig system dhcp server\n  {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n  {% if i.dhcp_server|default(true) %}\n  edit {{ 10 + loop.index0 }}\n    set dns-service default\n    set default-gateway {{ i.ip|ipaddr('address') }}\n    set netmask {{ i.ip|ipaddr('netmask') }}\n    set interface {{ i.name }}\n    config ip-range\n      edit 1\n        set start-ip {{ i.ip|ipaddr(4)|ipaddr('address') }}\n        set end-ip {{ i.ip|ipaddr(-5)|ipaddr('address') }}\n      next\n    end\n  next\n  {% endif %}\n  {% endfor %}\nend\n{% endif %}\n","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false,false]}},{"address":"fortimanager_object_cli_template.Hub-MultiRegion","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-MultiRegion","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"04-Hub-MultiRegion","modification_time":"","name":"04-Hub-MultiRegion","provision":"","scopetype":"adom","script":"{# 04-Hub-MultiRegion.j2                                                      #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set hub2hub_ol = [] %}\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n\n{% if project.regions|count \u003e 1  %}\n\n{% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\n  {% for r in project.regions if r != region %}\n    {% for h in project.regions[r].hubs %}\n      {% if i.ol_type in project.hubs[h].overlays %}\n      config vpn ipsec phase1-interface\n        edit \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set interface \"{{ i.name }}\"\n          set ike-version 2\n          {% if project.cert_auth|default(true) %}\n          set authmethod signature\n          set certificate \"{{ project.edge_cert_template|default('Hub') }}\"\n          {% else %}\n          set psksecret {{ project.psk|default('S3cr3t!') }}\n          {% endif %}\n          set keylife 28800\n          set peertype any\n          set proposal aes256gcm-prfsha256\n          {% if project.multireg_advpn|default(false) %}\n          set auto-discovery-sender enable\n          set auto-discovery-receiver enable\n          set auto-discovery-forwarder enable\n          set add-route disable\n          {% else %}\n          set exchange-interface-ip enable\n          {% endif %}\n          set remote-gw {{ project.hubs[h].overlays[i.ol_type].wan_ip }}\n          set encapsulation vpn-id-ipip\n          set exchange-ip-addr4 {{ loopback|ipaddr('address') }}\n          set dpd-retrycount 3\n          set dpd-retryinterval 5\n          set dpd on-idle\n        next\n      end\n      config vpn ipsec phase2-interface\n        edit \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set phase1name \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set proposal aes256gcm\n          set keepalive enable\n          set keylifeseconds 3600\n        next\n      end\n      config system interface\n        edit \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set vrf {{ pe_vrf }}\n        next\n      end\n      {% if project.overlay_stickiness|default(true) %}\n      config router policy\n        edit {{ hub2hub_ol|length * 2 + 11 }}\n          set input-device \"EDGE_{{ i.ol_type }}\"\n          set output-device \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set dst {{ project.lan_summary }}\n        next\n        edit {{ hub2hub_ol|length * 2 + 12 }}\n          set input-device \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set output-device \"EDGE_{{ i.ol_type }}\"\n          set dst {{ project.lan_summary }}\n        next\n      end\n      {% endif %}\n      {{ hub2hub_ol.append(r|upper~'_H'~loop.index~'_'~i.ol_type) or \"\" }}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n{% endfor %}\n\n{% if project.create_hub2hub_zone|default(true) %}\nconfig system zone\n  edit \"{{project.hub2hub_zone|default('hub2hub_overlay')}}\"\n    append interface {{ hub2hub_ol|join(' ') }}\n  next\nend\n{% endif %}\n\n{% if project.multireg_advpn|default(false) %}\n{# Advertise loopback summaries between the regions #}\nconfig router access-list\n  {# Regional loopback summary #}\n  edit \"LO_REGIONAL_SUMMARY\"\n    config rule\n      edit 1\n        set prefix {{ project.regions[region].lo_summary }}\n        set exact-match enable\n      next\n    end\n  next\nend\nconfig router route-map\n  edit \"HUB2HUB_OUT\"\n    config rule\n      edit 1\n        {# Do not readvertise regional loopback summary to remote Edges and other regions #}\n        set match-ip-address \"LO_REGIONAL_SUMMARY\"\n        set set-community no-advertise\n      next\n      edit 100\n      next\n    end\n  next\n  edit \"EDGE_OUT\"\n    config rule\n      edit 1\n        {# Do not advertise regional loopback summary to Edges (they already receive global summary) #}\n        set match-ip-address \"LO_REGIONAL_SUMMARY\"\n        set action deny\n      next\n      edit 100\n      next\n    end\n  next\nend\nconfig router bgp\n  config neighbor-group\n    edit \"EDGE\"\n      set route-map-out EDGE_OUT\n      {# Preserve next-hop of prefixes coming from remote regions #}\n      set attribute-unchanged-vpnv4 next-hop\n    next\n  end\n  config network\n    edit 103\n      set prefix {{ project.regions[region].lo_summary }}\n    next\n  end\nend\nconfig router static\n  edit 103\n    set dst {{ project.regions[region].lo_summary }}\n    set blackhole enable\n    set vrf \"{{ pe_vrf }}\"\n    set comment \"Regional loopback summary\"\n  next\nend\n{% else %}\n{# Advertise regional LAN summaries between the regions #}\nconfig router static\n  {% for v in project.regions[region].vrfs %}\n  edit {{ 110 + v.id }}\n    set dst {{ v.lan_summary }}\n    set blackhole enable\n    set vrf \"{{ v.id }}\"\n    set comment \"Regional LAN summary (VRF={{ v.id }})\"\n  next\n  {% endfor %}\nend\nconfig router access-list\n  edit \"LAN_REGIONAL_SUMMARY\"\n    config rule\n      {% for v in project.regions[region].vrfs %}\n      edit {{ v.id }}\n        set prefix {{ v.lan_summary }}\n        set exact-match enable\n      next\n      {% endfor %}\n    end\n  next\nend\nconfig router route-map\n  edit \"HUB2HUB_OUT\"\n    config rule\n      edit 1\n        set match-ip-address \"LAN_REGIONAL_SUMMARY\"\n        unset set-community\n      next\n      edit 1000\n        set action deny\n      next\n    end\n  next\nend\nconfig router bgp\n  config redistribute \"static\"\n    set status enable\n    set route-map \"HUB2HUB_OUT\"\n  end\nend\n{% endif %}\n\nconfig router bgp\n  config neighbor\n    {% for r in project.regions if r != region %}\n    {% for h in project.regions[r].hubs %}\n    edit {{ project.hubs[h].lo_bgp }}\n      set ebgp-enforce-multihop enable\n      set soft-reconfiguration enable\n      set advertisement-interval 1\n      set link-down-failover enable\n      set interface \"Lo\"\n      set update-source \"Lo\"\n      {% if project.multireg_advpn|default(false) %}\n      set attribute-unchanged-vpnv4 next-hop\n      set route-map-out \"HUB2HUB_OUT\"\n      {% else %}\n      set route-map-out-vpnv4 \"HUB2HUB_OUT\"\n      {% endif %}\n      set connect-timer 1\n      set remote-as {{ project.regions[r].as }}\n    next\n    {% endfor %}\n    {% endfor %}\n  end\nend\n\n{% endif %}\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false]}},{"address":"fortimanager_object_cli_template.Hub-Overlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-Overlay","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"02-Hub-Overlay","modification_time":"","name":"02-Hub-Overlay","provision":"","scopetype":"adom","script":"{# 02-Hub-Overlay.j2                                                          #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n\n{% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\nconfig vpn ipsec phase1-interface\n  edit \"EDGE_{{ i.ol_type }}\"\n    set type dynamic\n    set interface \"{{ i.name }}\"\n    set ike-version 2\n    {% if project.cert_auth|default(true) %}\n    set authmethod signature\n    set certificate \"{{ project.edge_cert_template|default('Hub') }}\"\n    {% else %}\n    set psksecret {{ project.psk|default('S3cr3t!') }}\n    {% endif %}\n    set peertype any\n    set proposal aes256gcm-prfsha256 aes256-sha256\n    {% if project.intrareg_advpn|default(true) %}\n    set auto-discovery-sender enable\n    {% else %}\n    set auto-discovery-sender disable\n    set exchange-interface-ip enable\n    {% endif %}    \n    set encapsulation vpn-id-ipip\n    set exchange-ip-addr4 {{ loopback|ipaddr('address') }}\n    set add-route disable\n    set network-overlay enable\n    set network-id {{ project.hubs[hostname].overlays[i.ol_type].network_id }}\n    set dpd-retrycount 2\n    set dpd-retryinterval 5\n    set dpd on-idle\n  next\nend\nconfig vpn ipsec phase2-interface\n  edit \"EDGE_{{ i.ol_type }}\"\n    set phase1name \"EDGE_{{ i.ol_type }}\"\n    set proposal aes256gcm\n    set keepalive enable\n  next\nend\nconfig system interface\n  edit \"EDGE_{{ i.ol_type }}\"\n    set vrf {{ pe_vrf }}\n  next\nend\n{% endfor %}\n","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false,false]}},{"address":"fortimanager_object_cli_template.Hub-Routing","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-Routing","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"03-Hub-Routing","modification_time":"","name":"03-Hub-Routing","provision":"","scopetype":"adom","script":"{# 03-Hub-Routing.j2                                                          #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_rt_as = project.vrf_rt_as|default('65000') %}\n\nconfig router community-list\n  edit \"SLA_OK\"\n    config rule\n      edit 1\n        set action permit\n        set match \"{{ project.regions[region].as }}:99\"\n      next\n    end\n  next\nend\nconfig router route-map\n  edit \"LOCAL_REGION\"\n    config rule\n      edit 1\n        {# Do not advertise to EBGP peers (outside the region #}\n        set set-community \"no-export\"\n      next\n    end\n  next\nend\nconfig router bgp\n  set as {{ project.regions[region].as }}\n  set router-id {{ loopback|ipaddr('address') }}\n  set keepalive-timer 15\n  set holdtime-timer 45\n  set ibgp-multipath enable\n  set ebgp-multipath enable\n  set recursive-next-hop enable\n  set recursive-inherit-priority enable\n  config neighbor-group\n    edit \"EDGE\"\n      set soft-reconfiguration-vpnv4 enable\n      set advertisement-interval 1\n      set next-hop-self enable\n      set remote-as {{ project.regions[region].as }}\n      set interface \"Lo\"\n      set update-source \"Lo\"\n      {% if project.intrareg_advpn|default(true) %}\n      set route-reflector-client-vpnv4 enable\n      {% else %}\n      set route-reflector-client-vpnv4 disable\n      {% endif %}      \n    next\n  end\n  config neighbor-range\n    edit 1\n      set prefix {{ project.lo_summary }}\n      set neighbor-group \"EDGE\"\n    next\n  end\n  config network\n    edit 1\n      set prefix {{ project.lo_summary }}\n      set route-map \"LOCAL_REGION\"\n    next\n    {% set network_to_advertise = [] %}\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined and i.advertise|default(true) %}\n      {% if not i.ip in network_to_advertise %}\n        {{ network_to_advertise.append(i.ip) or \"\" }}\n      {% endif %}\n    {% endfor %}\n\n    {% for i in network_to_advertise if i|length %}\n      edit {{ loop.index + 1 }}\n        set prefix {{ i|ipaddr(0) }}\n      next\n    {% endfor %}\n    end\n  config vrf\n    edit \"{{ pe_vrf }}\"\n      set role pe\n    next\n    {% for v in project.regions[region].vrfs %}\n    edit \"{{ v.id }}\"\n      set role \"ce\"\n      set rd \"{{ vrf_rt_as }}:{{ v.id }}\"\n      set import-rt \"{{ vrf_rt_as }}:{{ v.id }}\"\n      set export-rt \"{{ vrf_rt_as }}:{{ v.id }}\"\n    next\n    {% endfor %}\n  end\nend\n\n{% if project.overlay_stickiness|default(true) %}\nconfig router policy\n  {% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\n  edit {{ loop.index }}\n    set input-device \"EDGE_{{ i.ol_type }}\"\n    set output-device \"EDGE_{{ i.ol_type }}\"\n    set dst {{ project.lan_summary }}\n  next\n  {% endfor %}\nend\n{% endif %}\n\nconfig router static\n  edit 101\n    set dst {{ project.lan_summary }}\n    set blackhole enable\n    set vrf \"{{ pe_vrf }}\"\n    set comment \"Avoid potential leak of corporate traffic to underlay\"\n  next\n  edit 102\n    set dst {{ project.lo_summary }}\n    set blackhole enable\n    set vrf \"{{ pe_vrf }}\"\n  next\nend\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false]}},{"address":"fortimanager_object_cli_template.Hub-Underlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-Underlay","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"01-Hub-Underlay","modification_time":"","name":"01-Hub-Underlay","provision":"","scopetype":"adom","script":"{# 01-Hub-Underlay.j2                                                         #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_leak_summary = project.vrf_leak_summary|default('10.200.255.0/24') %}\n\n{# General settings #}\nconfig system settings\n  set location-id {{ loopback|ipaddr('address') }}\n  set tcp-session-without-syn enable  \n  set allow-subnet-overlap enable\nend\nconfig system global\n  {% if not project.profiles[profile].ha|default(false) and hostname is defined %}\n  set hostname {{ hostname }}\n  {% endif %}\nend\n\n{# Loop: Configure underlay interfaces #}\n{% for i in project.profiles[profile].interfaces if i.name is defined %}\nconfig system interface\n  edit \"{{i.name}}\"\n    {# IP #}\n    {% if i.ip is defined %}\n    {% if i.ip == 'dhcp' %}\n    set mode dhcp\n    {%  else %}\n    set mode static\n    set ip {{ i.ip }}\n    {% endif %}\n    {% endif %}\n\n    {# VRF #}\n    {% if i.vrf is defined %}\n    set vrf {{ i.vrf }}\n    {% else %}\n    set vrf {{ pe_vrf }}\n    {% endif %}\n\n    {# VLAN #}\n    {% if i.vlanid is defined and i.parent is defined %}\n    set vdom \"root\"\n    set type vlan\n    set vlanid {{ i.vlanid }}\n    set interface {{ i.parent }}\n    {% endif %}\n\n    {# Other settings #}\n    {% if i.role == 'wan' %}\n    set role wan\n    {% endif %}\n    {% if i.role == 'lan' %}\n    set role lan\n    set device-identification enable\n    {% endif %}\n    set allowaccess {{ 'ping' if not i.access|default(false) else i.access }}\n  next\nend\n\n{# VRF Leak #}\n{% if i.vrf is defined and i.allow_dia|default(false) %}\n  {# Configure software vdom-link interface if model is VM #}\n  {% if i.leak_npu_link|default('') == '' %}\n  config system vdom-link\n    edit \"vrf{{ i.vrf }}_leak\"\n    next\n  end\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vdom-link\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vdom-link\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {# Configure vlan interfaces on top of npu link if model is HW #}\n  {% else %}\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}0\"\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}1\"\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {% endif %}\n  {# Add a default route to pe_vrf for each vrf #}\n  config router static\n    edit {{ 10000 + i.vrf }}\n      set gateway {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}    \n      set device vrf{{ i.vrf }}_leak1\n    next\n  end\n\n  {# Configure a zone for easier policy management of vrf leaking #}\n  {% if project.create_vrf_leak_zone|default(true) and i.role == 'lan' %}\n  config system zone\n    edit \"{{ project.pevrf_leak_zone|default('pevrf_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak0\"\n    next\n    edit \"{{ project.vrf_leak_zone|default('vrfs_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak1\"\n    next\n  end\n  {% endif %}\n{% endif %}\n\n{# End Loop: Configure underlay interfaces #}\n{% endfor %}\n\n{# Loopback for incoming health-check probes #}\nconfig system interface\n  edit \"Lo-HC\"\n    set vdom \"root\"\n    set type loopback\n    set vrf {{ pe_vrf }}\n    set ip {{ project.hub_hc_server|default('10.200.99.1') }}/32\n    set allowaccess ping\n  next\n  {# Main Loopback #}\n  edit \"Lo\"\n    set vdom \"root\"\n    set type loopback\n    set vrf {{ pe_vrf }}\n    set ip {{ loopback|ipaddr('address') }}/32\n    set allowaccess ping\n  next\nend\n\n{# Create LAN Zone #}\n{% set lan_intf = [] %}\n{% if project.create_lan_zone|default(true) %}\nconfig system zone\n  edit \"{{ project.lan_zone|default('lan_zone') }}\"\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n    {{  lan_intf.append(i.name) or \"\" }}\n    {% endfor %}\n    set interface {{ lan_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Enable DHCP Server on LAN interfaces #}\n{% if project.create_lan_dhcp_server|default(true) %}\nconfig system dhcp server\n  {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n  {% if i.dhcp_server|default(true) %}\n  edit {{ 10 + loop.index0 }}\n    set dns-service default\n    set default-gateway {{ i.ip|ipaddr('address') }}\n    set netmask {{ i.ip|ipaddr('netmask') }}\n    set interface {{ i.name }}\n    config ip-range\n      edit 1\n        set start-ip {{ i.ip|ipaddr(4)|ipaddr('address') }}\n        set end-ip {{ i.ip|ipaddr(-5)|ipaddr('address') }}\n      next\n    end\n  next\n  {% endif %}\n  {% endfor %}\nend\n{% endif %}\n","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false,false]}},{"address":"fortimanager_object_cli_template.Project","mode":"managed","type":"fortimanager_object_cli_template","name":"Project","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a project","id":"Project","modification_time":"","name":"Project","provision":"","scopetype":"adom","script":"{#                            Project Template                                #}\n{# -------------------------------------------------------------------------- #}\n{# This file describes the project: its Regions, Hubs and Device Profiles     #}\n{# Normally, this is the only file that needs to be edited between            #}\n{# different projects                                                         #}\n{# -------------------------------------------------------------------------- #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# Please contact your Fortinet representatives for more details              #}\n\n{#\n  Per-device variables used:\n  - Required:\n    - hostname\n    - loopback\n    - profile\n    - region\n    - lan_ip_edu\n    - lan_ip_fin\n    - mpls_wan_ip (whenever the profile includes MPLS link)\n    - mpls_wan_gateway (whenever the profile includes MPLS link)\n  - Optional:\n    - outbandwidth\n    - inbandwidth\n    - shaping_profile\n#}\n\n{# Optional Settings #}\n{% set multireg_advpn = true %}\n{% set cert_auth = false %}\n\n{#  Mandatory Global Definitions #}\n{% set lo_summary = '10.200.0.0/14' %}\n{% set lan_summary = '10.0.0.0/8' %}\n\n{# Regions #}\n{% set regions = {\n    'West': {\n      'as': '65001',\n      'lo_summary': '10.200.1.0/24',\n      'hubs': [ 'site1-H1', 'site1-H2' ],\n      'vrfs': [\n        {\n          'id': 11,\n          'lan_summary': '10.0.0.0/14'\n        },\n        {\n          'id': 12,\n          'lan_summary': '10.0.0.0/14'\n        }\n      ]\n    },\n    'East': {\n      'as': '65002',\n      'lo_summary': '10.200.2.0/24',\n      'hubs': [ 'site2-H1' ],\n      'vrfs': [\n        {\n          'id': 11,\n          'lan_summary': '10.4.0.0/14'\n        },\n        {\n          'id': 12,\n          'lan_summary': '10.4.0.0/14'\n        }\n      ]\n    }\n  }\n%}\n\n{# Device Profiles #}\n{% set profiles = {\n\n    'Silver': {\n      'interfaces': [\n        {\n          'name': 'port1',\n          'role': 'wan',\n          'ol_type': 'ISP1',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'shaping_profile': shaping_profile,\n          'dia': true\n        },\n        {\n          'name': 'port2',\n          'role': 'wan',\n          'ol_type': 'MPLS',\n          'ip': mpls_wan_ip,\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'shaping_profile': shaping_profile\n        },\n        {\n          'name': 'port3',\n          'role': 'lan',\n          'vrf': 11,\n          'allow_dia': true,\n          'ip': lan_ip_edu\n        },\n        {\n          'name': 'port4',\n          'role': 'lan',\n          'vrf': 12,\n          'ip': lan_ip_fin\n        }\n      ]\n    },\n\n    'Gold': {\n      'interfaces': [\n        {\n          'name': 'port1',\n          'role': 'wan',\n          'ol_type': 'ISP1',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'dia': true\n        },\n        {\n          'name': 'port2',\n          'role': 'wan',\n          'ol_type': 'ISP2',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'dia': true\n        },\n        {\n          'name': 'port3',\n          'role': 'wan',\n          'ol_type': 'MPLS',\n          'ip': mpls_wan_ip,\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth\n        },\n        {\n          'name': 'port4',\n          'role': 'lan',\n          'vrf': 11,\n          'allow_dia': true,\n          'ip': lan_ip_edu\n        },\n        {\n          'name': 'port5',\n          'role': 'lan',\n          'vrf': 12,\n          'ip': lan_ip_fin\n        }\n      ]\n    }\n\n  }\n%}\n\n{# Hubs #}\n{% set hubs = {\n\n    'site1-H1': {\n      'lo_bgp': '10.200.1.253',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.1.1',\n          'network_id': '11'\n        },\n        'ISP2': {\n          'wan_ip': '100.64.1.9',\n          'network_id': '12'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.1.5',\n          'network_id': '13'\n        }\n      }\n    },\n\n    'site1-H2': {\n      'lo_bgp': '10.200.1.254',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.2.1',\n          'network_id': '21'\n        },\n        'ISP2': {\n          'wan_ip': '100.64.2.9',\n          'network_id': '22'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.2.5',\n          'network_id': '23'\n        }\n      }\n    },\n\n    'site2-H1': {\n      'lo_bgp': '10.200.2.253',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.4.1',\n          'network_id': '41'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.4.5',\n          'network_id': '43'\n        }\n      }\n    }\n\n  }\n%}","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_gateway","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false,false,false]}},{"address":"fortimanager_object_cli_templategroup.Edge-Template","mode":"managed","type":"fortimanager_object_cli_templategroup","name":"Edge-Template","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI template group","id":"Edge-Template","member":["01-Edge-Underlay","02-Edge-Overlay","03-Edge-Routing"],"modification_time":"","name":"Edge-Template","scopetype":"adom","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"member":[false,false,false],"variables":[false,false,false,false,false,false,false,false,false,false]}},{"address":"fortimanager_object_cli_templategroup.Hub-Template","mode":"managed","type":"fortimanager_object_cli_templategroup","name":"Hub-Template","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI template group","id":"Hub-Template","member":["01-Hub-Underlay","02-Hub-Overlay","03-Hub-Routing","04-Hub-MultiRegion"],"modification_time":"","name":"Hub-Template","scopetype":"adom","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"member":[false,false,false,false],"variables":[false,false,false,false,false,false,false,false,false,false]}},{"address":"fortimanager_object_fmg_variable.makeMetadata-hostname","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-hostname","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"authByTerraform"}],"dynamic_sort_subtable":"false","id":"hostname","name":"hostname","scopetype":"adom","value":"FGT"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]}},{"address":"fortimanager_object_fmg_variable.makeMetadata-inbandwidth","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-inbandwidth","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"5"}],"dynamic_sort_subtable":"false","id":"inbandwidth","name":"inbandwidth","scopetype":"adom","value":"5"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]}},{"address":"fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-lan_ip_edu","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"10.0.0.1/20"}],"dynamic_sort_subtable":"false","id":"lan_ip_edu","name":"lan_ip_edu","scopetype":"adom","value":"10.0.0.1/24"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]}},{"address":"fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-lan_ip_fin","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"11.0.0.1/24"}],"dynamic_sort_subtable":"false","id":"lan_ip_fin","name":"lan_ip_fin","scopetype":"adom","value":"11.0.0.1/24"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]}},{"address":"fortimanager_object_fmg_variable.makeMetadata-loopback","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-loopback","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"1.1.1.1/32"}],"dynamic_sort_subtable":"false","id":"loopback","name":"loopback","scopetype":"adom","value":"1.1.1.1/32"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]}},{"address":"fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-mpls_wan_gateway","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"2.2.2.2/32"}],"dynamic_sort_subtable":"false","id":"mpls_wan_gateway","name":"mpls_wan_gateway","scopetype":"adom","value":"2.2.2.2/32"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]}},{"address":"fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-mpls_wan_ip","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"12.0.0.1/24"}],"dynamic_sort_subtable":"false","id":"mpls_wan_ip","name":"mpls_wan_ip","scopetype":"adom","value":"12.0.0.1/24"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]}},{"address":"fortimanager_object_fmg_variable.makeMetadata-outbandwidth","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-outbandwidth","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"10"}],"dynamic_sort_subtable":"false","id":"outbandwidth","name":"outbandwidth","scopetype":"adom","value":"10"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]}},{"address":"fortimanager_object_fmg_variable.makeMetadata-profile","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-profile","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"Gold"}],"dynamic_sort_subtable":"false","id":"profile","name":"profile","scopetype":"adom","value":"Gold"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]}},{"address":"fortimanager_object_fmg_variable.makeMetadata-region","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-region","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"Reagion Variable","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"West"}],"dynamic_sort_subtable":"false","id":"region","name":"region","scopetype":"adom","value":"East"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]}},{"address":"fortimanager_object_fmg_variable.makeMetadata-shaping_profile","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-shaping_profile","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"Silver"}],"dynamic_sort_subtable":"false","id":"shaping_profile","name":"shaping_profile","scopetype":"adom","value":"Silver"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]}}]}},"resource_changes":[{"address":"fortimanager_dvm_cmd_add_device.authDevice","mode":"managed","type":"fortimanager_dvm_cmd_add_device","name":"authDevice","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["create"],"before":null,"after":{"device":[{"adm_usr":"admin","authorizationtemplate":null,"desc":null,"deviceaction":"promote_unreg","deviceblueprint":null,"fazquota":null,"ip":null,"metafields":null,"metafields_map":null,"mgmt_mode":null,"mr":null,"name":"authByTerraform","os_type":null,"os_ver":null,"patch":null,"platform_str":"FortiGate-VM64-KVM","sn":"FGVMEVDNB1HFA86B"}],"dynamic_sort_subtable":"false","flags":["create_task"],"fmgadom":"createdByTerraform","groups":[]},"after_unknown":{"device":[{"adm_pass":true}],"flags":[false],"force_recreate":true,"groups":[],"id":true},"before_sensitive":false,"after_sensitive":{"device":[{"adm_pass":true}],"flags":[false],"groups":[]}}},{"address":"fortimanager_dvm_cmd_update_device.refreshDevice","mode":"managed","type":"fortimanager_dvm_cmd_update_device","name":"refreshDevice","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["delete"],"before":{"device":"FortiGate-VM64-KVM","flags":["create_task","nonblocking"],"fmgadom":"createdByTerraform","force_recreate":null,"id":"DvmCmdUpdateDevice"},"after":null,"after_unknown":{},"before_sensitive":{"flags":[false,false]},"after_sensitive":false},"action_reason":"delete_because_no_resource_config"},{"address":"fortimanager_dvmdb_adom.manageADOM","mode":"managed","type":"fortimanager_dvmdb_adom","name":"manageADOM","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["create"],"before":null,"after":{"desc":null,"flags":["no_vpn_console"],"lock_override":null,"log_db_retention_hours":1440,"log_disk_quota":51200,"log_disk_quota_alert_thres":90,"log_disk_quota_split_ratio":70,"log_file_retention_hours":8760,"metafields":null,"mig_mr":4,"mig_os_ver":"0.0","mode":"gms","mr":4,"name":"createdByTerraform","os_ver":"7.0","restricted_prds":["fos"],"state":1,"workspace_mode":1},"after_unknown":{"create_time":true,"flags":[false],"id":true,"restricted_prds":[false],"tz":true,"uuid":true},"before_sensitive":false,"after_sensitive":{"flags":[false],"restricted_prds":[false]}}},{"address":"fortimanager_exec_workspace_action.lockADOM","mode":"managed","type":"fortimanager_exec_workspace_action","name":"lockADOM","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["create"],"before":null,"after":{"action":"lockbegin","adom":"createdByTerraform","comment":"","param":"","scopetype":"adom","target":""},"after_unknown":{"force_recreate":true,"id":true},"before_sensitive":false,"after_sensitive":{}}},{"address":"fortimanager_exec_workspace_action.unlockADOM","mode":"managed","type":"fortimanager_exec_workspace_action","name":"unlockADOM","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["create"],"before":null,"after":{"action":"lockend","adom":"createdByTerraform","comment":"","param":"","scopetype":"adom","target":""},"after_unknown":{"force_recreate":true,"id":true},"before_sensitive":false,"after_sensitive":{}}},{"address":"fortimanager_json_generic_api.authDevice","mode":"managed","type":"fortimanager_json_generic_api","name":"authDevice","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["delete"],"before":{"comment":null,"force_recreate":null,"id":"JSONRPC-Requst-81615269-be2c-45d7-bb98-fceaf80319cb","json_content":"{\n  \"method\": \"exec\",\n  \"params\": [\n    {\n      \"data\": {\n        \"adom\": \"createdByTerraform\",\n        \"device\": {\n          \"device action\": \"promote_unreg\",\n          \"name\": \"FortiGate-VM64-KVM\",\n          \"platform_str\": \"FortiGate-VM64-KVM\",\n          \"sn\": \"FGVMEVDNB1HFA86B\",\n          \"adm_usr\": \"admin\",\n          \"adm_pass\": \"\"\n        },\n        \"flags\": [\n          \"create_task\"\n        ]\n      },\n      \"url\": \"/dvm/cmd/add/device\"\n    }\n  ]\n}\n","response":"{ \"result\": [ { \"data\": { \"device\": { \"adm_usr\": \"admin\", \"av_ver\": \"1.00000(2018-04-09 18:07)\", \"beta\": -1, \"branch_pt\": 1262, \"build\": 1262, \"conf_status\": 2, \"conn_mode\": 1, \"conn_status\": 1, \"dev_status\": 0, \"faz.perm\": 15, \"flags\": 2097537, \"hostname\": \"FortiGate-VM64-KVM\", \"ip\": \"10.1.10.249\", \"ips_ver\": \"6.00741(2015-12-01 02:30)\", \"last_checked\": 1697792034, \"maxvdom\": 2, \"mgmt.__data[0]\": 4132787, \"mgmt.__data[4]\": 2104856576, \"mgmt.__data[6]\": 1, \"mgmt_if\": \"port1\", \"mgmt_mode\": 3, \"mgmt_uuid\": \"716a7346-6f1f-51ee-22fa-ba7a0575dbc9\", \"mr\": 2, \"name\": \"FortiGate-VM64-KVM\", \"oid\": 792, \"opts\": 512, \"os_type\": 0, \"os_ver\": 7, \"patch\": 3, \"platform_id\": 161, \"platform_str\": \"FortiGate-VM64-KVM\", \"sn\": \"FGVMEVDNB1HFA86B\", \"source\": 1, \"tab_status\": \"\u003cunknown\u003e\", \"tunnel_ip\": \"169.254.0.90\", \"vdom\": [ { \"devid\": 792, \"ext_flags\": 1, \"name\": \"root\", \"oid\": 3, \"opmode\": 1, \"status\": \"\u003cunknown\u003e\", \"tab_status\": \"\u003cunknown\u003e\", \"vdom_type\": 1 } ], \"version\": 700, \"vm_cpu\": 1, \"vm_cpu_limit\": 1, \"vm_mem\": 2007, \"vm_mem_limit\": 2048, \"vm_status\": 6 }, \"taskid\": 656 }, \"status\": { \"code\": 0, \"message\": \"OK\" }, \"url\": \"\\/dvm\\/cmd\\/add\\/device\" } ] }"},"after":null,"after_unknown":{},"before_sensitive":{},"after_sensitive":false},"action_reason":"delete_because_no_resource_config"},{"address":"fortimanager_json_generic_api.updateDeviceDB","mode":"managed","type":"fortimanager_json_generic_api","name":"updateDeviceDB","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"comment":null,"force_recreate":null,"id":"JSONRPC-Requst-16aab421-780d-478a-8a85-a1358dc650b2","json_content":"{\n  \"method\": \"update\",\n  \"params\": [\n    {\n      \"data\": {\n        \"adm_pass\": \"\",\n        \"adm_usr\": \"admin\",\n        \"desc\": \"This is updated from Terrafrom using an API!\",\n        \"latitude\": 60.37309404359674,\n        \"longitude\": 5.33920881412722,\n        \"meta fields\": {\n          \"Address\": \"Fj√∏sangerveien 65\",\n          \"Company/Organization\": \"Eviny Digital AS\",\n          \"Contact Email\": \"ghaith.almujalled@verja.no\",\n          \"Contact Phone Number\": \"+4745402619\"\n        },\n        \"name\": \"authByTerraform\"\n      },\n      \"url\": \"/dvmdb/adom/createdByTerraform/device/FortiGate-VM64-KVM\"\n    }\n  ]\n}\n","response":"{ \"result\": [ { \"data\": { \"name\": \"authByTerraform\" }, \"status\": { \"code\": 0, \"message\": \"OK\" }, \"url\": \"\\/dvmdb\\/adom\\/createdByTerraform\\/device\\/FortiGate-VM64-KVM\" } ] }"},"after":{"comment":null,"force_recreate":null,"id":"JSONRPC-Requst-16aab421-780d-478a-8a85-a1358dc650b2","json_content":"{\n  \"method\": \"update\",\n  \"params\": [\n    {\n      \"data\": {\n        \"adm_pass\": \"\",\n        \"adm_usr\": \"admin\",\n        \"desc\": \"This is updated from Terrafrom using an API!\",\n        \"latitude\": 60.37309404359674,\n        \"longitude\": 5.33920881412722,\n        \"meta fields\": {\n          \"Address\": \"Fj√∏sangerveien 65\",\n          \"Company/Organization\": \"Eviny Digital AS\",\n          \"Contact Email\": \"ghaith.almujalled@verja.no\",\n          \"Contact Phone Number\": \"+4745402619\"\n        },\n        \"name\": \"authByTerraform\"\n      },\n      \"url\": \"/dvmdb/adom/createdByTerraform/device/FortiGate-VM64-KVM\"\n    }\n  ]\n}\n","response":"{ \"result\": [ { \"data\": { \"name\": \"authByTerraform\" }, \"status\": { \"code\": 0, \"message\": \"OK\" }, \"url\": \"\\/dvmdb\\/adom\\/createdByTerraform\\/device\\/FortiGate-VM64-KVM\" } ] }"},"after_unknown":{},"before_sensitive":{},"after_sensitive":{}}},{"address":"fortimanager_object_cli_template.Edge-Overlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Edge-Overlay","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"02-Edge-Overlay","modification_time":"","name":"02-Edge-Overlay","provision":"","scopetype":"adom","script":"{# 02-Edge-Overlay.j2                                                         #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n\n{% for h in project.regions[region].hubs %}\n{% set hubloop = loop %}\n{% set ol_tunnels = [] %}\n{% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\n  {# Track generated tunnels, to handle duplicates by adding extra index as a suffix #}\n  {% set ul_name = i.ul_name~\"-\" if i.ul_name is defined else \"\" %}\n  {% set ol_tun = ul_name~\"H\"~hubloop.index~\"_\"~i.ol_type %}\n  {% set count = ol_tunnels|select(\"equalto\", ol_tun)|list|count %}\n  {# Tunnel name = 'H\u003chub_number\u003e_\u003col_type\u003e' if no duplicates, otherwise 'H\u003chub_number\u003e_\u003col_type\u003e_\u003cindex\u003e' #}\n  {% set ol_tun_name = ol_tun if not count else ol_tun~'_'~(count+1) %}\n  {{ ol_tunnels.append(ol_tun) or \"\" }}\nconfig vpn ipsec phase1-interface\n  edit \"{{ ol_tun_name }}\"\n    set interface \"{{ i.name }}\"\n    set ike-version 2\n    {% if project.cert_auth|default(true) %}\n    set authmethod signature\n    set certificate \"{{ project.edge_cert_template|default('Edge') }}\"\n    {% else %}\n    set psksecret {{ project.psk|default('S3cr3t!') }}\n    {% endif %}\n    set keylife 28800\n    set peertype any\n    set net-device enable\n    set proposal aes256gcm-prfsha256 aes256-sha256\n    set idle-timeout enable\n    {% if project.intrareg_advpn|default(true) %}\n    set auto-discovery-receiver enable\n    set add-route disable\n    {% else %}\n    set auto-discovery-receiver disable    \n    set exchange-interface-ip enable\n    {% endif %}    \n    set encapsulation vpn-id-ipip\n    set exchange-ip-addr4 {{ loopback|ipaddr('address') }}\n    set network-overlay enable\n    set network-id {{ project.hubs[h].overlays[i.ol_type].network_id }}\n    set remote-gw {{ project.hubs[h].overlays[i.ol_type].wan_ip }}\n    set dpd-retrycount 3\n    set dpd-retryinterval 5\n    set dpd on-idle\n  next\nend\nconfig vpn ipsec phase2-interface\n  edit \"{{ ol_tun_name }}\"\n    set phase1name \"{{ ol_tun_name }}\"\n    set proposal aes256gcm\n    set keepalive enable\n    set keylifeseconds 3600\n  next\nend\nconfig system interface\n  edit \"{{ ol_tun_name }}\"\n    set vrf {{ pe_vrf }}\n  next\nend\n{% endfor %}\n{% endfor %}\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"02-Edge-Overlay","modification_time":"","name":"02-Edge-Overlay","provision":"","scopetype":"adom","script":"{# 02-Edge-Overlay.j2                                                         #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n\n{% for h in project.regions[region].hubs %}\n{% set hubloop = loop %}\n{% set ol_tunnels = [] %}\n{% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\n  {# Track generated tunnels, to handle duplicates by adding extra index as a suffix #}\n  {% set ul_name = i.ul_name~\"-\" if i.ul_name is defined else \"\" %}\n  {% set ol_tun = ul_name~\"H\"~hubloop.index~\"_\"~i.ol_type %}\n  {% set count = ol_tunnels|select(\"equalto\", ol_tun)|list|count %}\n  {# Tunnel name = 'H\u003chub_number\u003e_\u003col_type\u003e' if no duplicates, otherwise 'H\u003chub_number\u003e_\u003col_type\u003e_\u003cindex\u003e' #}\n  {% set ol_tun_name = ol_tun if not count else ol_tun~'_'~(count+1) %}\n  {{ ol_tunnels.append(ol_tun) or \"\" }}\nconfig vpn ipsec phase1-interface\n  edit \"{{ ol_tun_name }}\"\n    set interface \"{{ i.name }}\"\n    set ike-version 2\n    {% if project.cert_auth|default(true) %}\n    set authmethod signature\n    set certificate \"{{ project.edge_cert_template|default('Edge') }}\"\n    {% else %}\n    set psksecret {{ project.psk|default('S3cr3t!') }}\n    {% endif %}\n    set keylife 28800\n    set peertype any\n    set net-device enable\n    set proposal aes256gcm-prfsha256 aes256-sha256\n    set idle-timeout enable\n    {% if project.intrareg_advpn|default(true) %}\n    set auto-discovery-receiver enable\n    set add-route disable\n    {% else %}\n    set auto-discovery-receiver disable    \n    set exchange-interface-ip enable\n    {% endif %}    \n    set encapsulation vpn-id-ipip\n    set exchange-ip-addr4 {{ loopback|ipaddr('address') }}\n    set network-overlay enable\n    set network-id {{ project.hubs[h].overlays[i.ol_type].network_id }}\n    set remote-gw {{ project.hubs[h].overlays[i.ol_type].wan_ip }}\n    set dpd-retrycount 3\n    set dpd-retryinterval 5\n    set dpd on-idle\n  next\nend\nconfig vpn ipsec phase2-interface\n  edit \"{{ ol_tun_name }}\"\n    set phase1name \"{{ ol_tun_name }}\"\n    set proposal aes256gcm\n    set keepalive enable\n    set keylifeseconds 3600\n  next\nend\nconfig system interface\n  edit \"{{ ol_tun_name }}\"\n    set vrf {{ pe_vrf }}\n  next\nend\n{% endfor %}\n{% endfor %}\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after_unknown":{},"before_sensitive":{"variables":[false,false,false,false,false,false,false,false,false]},"after_sensitive":{"variables":[false,false,false,false,false,false,false,false,false]}}},{"address":"fortimanager_object_cli_template.Edge-Routing","mode":"managed","type":"fortimanager_object_cli_template","name":"Edge-Routing","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"03-Edge-Routing","modification_time":"","name":"03-Edge-Routing","provision":"","scopetype":"adom","script":"{# 03-Edge-Routing.j2                                                         #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_rt_as = project.vrf_rt_as|default('65000') %}\n\nconfig router route-map\n  {% for i in range(1,3) %}\n  edit \"H{{loop.index}}_TAG\"\n    config rule\n      edit 1\n        set set-tag {{ loop.index }}\n      next\n    end\n  next\n  {% endfor %}\n  edit \"SLA_OK\"\n    config rule\n      edit 1\n        set set-community \"{{ project.regions[region].as }}:99\"\n      next\n    end\n  next\nend\n\nconfig router bgp\n  set as {{ project.regions[region].as }}\n  set router-id {{ loopback|ipaddr('address') }}\n  set keepalive-timer 15\n  set holdtime-timer 45\n  set ibgp-multipath enable\n  set recursive-next-hop enable\n  set tag-resolve-mode merge\n  config neighbor\n    {% for h in project.regions[region].hubs %}\n    edit {{ project.hubs[h].lo_bgp }}\n      set soft-reconfiguration enable\n      set soft-reconfiguration-vpnv4 enable\n      set advertisement-interval 1\n      set interface \"Lo\"\n      set update-source \"Lo\"\n      set connect-timer 1\n      set remote-as {{ project.regions[region].as }}\n      set route-map-in \"H{{loop.index}}_TAG\"\n      set route-map-in-vpnv4 \"H{{loop.index}}_TAG\"\n      set route-map-out-vpnv4-preferable \"SLA_OK\"\n    next\n    {% endfor %}\n  end\n  config network\n    {% set network_to_advertise = [] %}\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined and i.advertise|default(true) %}\n      {% if not i.ip in network_to_advertise %}\n        {{ network_to_advertise.append(i.ip) or \"\" }}\n      {% endif %}\n    {% endfor %}\n\n    {% for i in network_to_advertise if i|length %}\n      edit {{ loop.index }}\n        set prefix {{ i|ipaddr(0) }}\n      next\n    {% endfor %}\n    end\n  config vrf\n    edit \"{{ pe_vrf }}\"\n      set role pe\n    next\n    {% for i in project.profiles[profile].interfaces if i.vrf is defined and i.name is defined %}\n    edit \"{{ i.vrf }}\"\n      set role \"ce\"\n      set rd \"{{ vrf_rt_as }}:{{ i.vrf }}\"\n      set import-rt \"{{ vrf_rt_as }}:{{ i.vrf }}\"\n      set export-rt \"{{ vrf_rt_as }}:{{ i.vrf }}\"\n    next\n    {% endfor %}\n  end\nend\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"03-Edge-Routing","modification_time":"","name":"03-Edge-Routing","provision":"","scopetype":"adom","script":"{# 03-Edge-Routing.j2                                                         #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_rt_as = project.vrf_rt_as|default('65000') %}\n\nconfig router route-map\n  {% for i in range(1,3) %}\n  edit \"H{{loop.index}}_TAG\"\n    config rule\n      edit 1\n        set set-tag {{ loop.index }}\n      next\n    end\n  next\n  {% endfor %}\n  edit \"SLA_OK\"\n    config rule\n      edit 1\n        set set-community \"{{ project.regions[region].as }}:99\"\n      next\n    end\n  next\nend\n\nconfig router bgp\n  set as {{ project.regions[region].as }}\n  set router-id {{ loopback|ipaddr('address') }}\n  set keepalive-timer 15\n  set holdtime-timer 45\n  set ibgp-multipath enable\n  set recursive-next-hop enable\n  set tag-resolve-mode merge\n  config neighbor\n    {% for h in project.regions[region].hubs %}\n    edit {{ project.hubs[h].lo_bgp }}\n      set soft-reconfiguration enable\n      set soft-reconfiguration-vpnv4 enable\n      set advertisement-interval 1\n      set interface \"Lo\"\n      set update-source \"Lo\"\n      set connect-timer 1\n      set remote-as {{ project.regions[region].as }}\n      set route-map-in \"H{{loop.index}}_TAG\"\n      set route-map-in-vpnv4 \"H{{loop.index}}_TAG\"\n      set route-map-out-vpnv4-preferable \"SLA_OK\"\n    next\n    {% endfor %}\n  end\n  config network\n    {% set network_to_advertise = [] %}\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined and i.advertise|default(true) %}\n      {% if not i.ip in network_to_advertise %}\n        {{ network_to_advertise.append(i.ip) or \"\" }}\n      {% endif %}\n    {% endfor %}\n\n    {% for i in network_to_advertise if i|length %}\n      edit {{ loop.index }}\n        set prefix {{ i|ipaddr(0) }}\n      next\n    {% endfor %}\n    end\n  config vrf\n    edit \"{{ pe_vrf }}\"\n      set role pe\n    next\n    {% for i in project.profiles[profile].interfaces if i.vrf is defined and i.name is defined %}\n    edit \"{{ i.vrf }}\"\n      set role \"ce\"\n      set rd \"{{ vrf_rt_as }}:{{ i.vrf }}\"\n      set import-rt \"{{ vrf_rt_as }}:{{ i.vrf }}\"\n      set export-rt \"{{ vrf_rt_as }}:{{ i.vrf }}\"\n    next\n    {% endfor %}\n  end\nend\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after_unknown":{},"before_sensitive":{"variables":[false,false,false,false,false,false,false,false,false]},"after_sensitive":{"variables":[false,false,false,false,false,false,false,false,false]}}},{"address":"fortimanager_object_cli_template.Edge-Underlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Edge-Underlay","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"01-Edge-Underlay","modification_time":"","name":"01-Edge-Underlay","provision":"","scopetype":"adom","script":"{# 01-Edge-Underlay.j2                                                        #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_leak_summary = project.vrf_leak_summary|default('10.200.255.0/24') %}\n\n{# General settings #}\nconfig system settings\n  set location-id {{ loopback|ipaddr('address') }}\n  set allow-subnet-overlap enable\nend\nconfig system global\n  {% if not project.profiles[profile].ha|default(false) and hostname is defined %}\n  set hostname {{ hostname }}\n  {% endif %}\nend\n\n{# Loop: Configure underlay interfaces #}\n{% for i in project.profiles[profile].interfaces if i.name is defined %}\nconfig system interface\n  edit \"{{i.name}}\"\n    {# IP #}\n    {% if i.ip is defined %}\n    {% if i.ip == 'dhcp' %}\n    set mode dhcp\n    {%  else %}\n    set mode static\n    set ip {{ i.ip }}\n    {% endif %}\n    {% endif %}\n\n    {# VRF #}\n    {% if i.vrf is defined %}\n    set vrf {{ i.vrf }}\n    {% else %}\n    set vrf {{ pe_vrf }}\n    {% endif %}\n\n    {# VLAN #}\n    {% if i.vlanid is defined and i.parent is defined %}\n    set vdom \"root\"\n    set type vlan\n    set vlanid {{ i.vlanid }}\n    set interface {{ i.parent }}\n    {% endif %}\n\n    {# FEX #}\n    {% if i.fex|default(false) %}\n    set type fext-wan\n    {% endif %}       \n\n    {# QoS: Add shaping profile and in/outbandwidth only if interface is of type wan and meta fields are both defined #}\n    {% if i.role == 'wan' and i.outbandwidth is defined %}\n    set estimated-upstream-bandwidth {{ i.outbandwidth }}\n      {% if i.shaping_profile is defined %}\n      set outbandwidth {{ i.outbandwidth }}\n      set egress-shaping-profile {{ i.shaping_profile }}\n      {% endif %}\n    {% endif %}\n    {% if i.role == 'wan' and i.inbandwidth is defined %}\n    set estimated-downstream-bandwidth {{ i.inbandwidth }}\n      {% if i.shaping_profile is defined %}\n      set inbandwidth {{ i.inbandwidth }}\n      set ingress-shaping-profile {{ i.shaping_profile }}\n      {% endif %}\n    {% endif %}\n\n    {# Other settings #}\n    {% if i.role == 'wan' %}\n    set role wan\n    {% endif %}\n    {% if i.role == 'lan' %}\n    set role lan\n    set device-identification enable\n    {% endif %}\n    set allowaccess {{ 'ping' if not i.access|default(false) else i.access }}\n  next\nend\n\n{# Configure FEX parent interface #}\n{% if i.fex|default(false) %}\nconfig system interface\n  edit {{ i.parent }}\n    set mode dhcp\n    set allowaccess ping fabric\n    set monitor-bandwidth enable\n    set role wan\n    unset lldp-reception      \n  next\nend\n{% endif %}\n\n{# VRF Leak #}\n{% if i.vrf is defined and i.allow_dia|default(false) %}\n  {# Configure software vdom-link interface if model is VM #}\n  {% if i.leak_npu_link|default('') == '' %}\n  config system vdom-link\n    edit \"vrf{{ i.vrf }}_leak\"\n    next\n  end\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vdom-link\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vdom-link\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {# Configure vlan interfaces on top of npu link if model is HW #}\n  {% else %}\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}0\"\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}1\"\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {% endif %}\n\n  {# Add default route to pe_vrf for each vrf #}\n  config router static\n    edit {{ 10000 + i.vrf }}\n      set gateway {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}\n      set device vrf{{ i.vrf }}_leak1\n    next\n  end\n\n  {# Configure a zone for easier policy management of vrf leaking #}\n  {% if project.create_vrf_leak_zone|default(true) and i.role == 'lan' %}\n  config system zone\n    edit \"{{ project.pevrf_leak_zone|default('pevrf_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak0\"\n    next\n    edit \"{{ project.vrf_leak_zone|default('vrfs_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak1\"\n    next\n  end\n  {% endif %}\n{% endif %}\n\n{# End Loop: Configure underlay interfaces #}\n{% endfor %}\n\n{# Main Loopback #}\nconfig system interface\n  edit \"Lo\"\n    set vdom \"root\"\n    set type loopback\n    set vrf {{ pe_vrf }}\n    set ip {{ loopback|ipaddr('address') }}/32\n    set allowaccess ping\n  next\nend\n\n{# Create LAN Zone #}\n{% set lan_intf = [] %}\n{% if project.create_lan_zone|default(true) %}\nconfig system zone\n  edit \"{{ project.lan_zone|default('lan_zone') }}\"\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n    {{  lan_intf.append(i.name) or \"\" }}\n    {% endfor %}\n    set interface {{ lan_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Support SD-Branch (Fortilink interface) #}\n{% set fortilink_intf = [] %}\n{% for i in project.profiles[profile].interfaces if i.role == 'sd_branch' and i.name is defined %}\n{{  fortilink_intf.append(i.name) or \"\" }}\n{% endfor %}\n{% if fortilink_intf %}\nconfig system global\n  set switch-controller enable\nend\nconfig system interface\n  edit \"fortilink\"\n    set member {{ fortilink_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Enable DHCP Server on LAN interfaces #}\n{% if project.create_lan_dhcp_server|default(true) %}\nconfig system dhcp server\n  {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n  {% if i.dhcp_server|default(true) %}\n  edit {{ 10 + loop.index0 }}\n    set dns-service default\n    set default-gateway {{ i.ip|ipaddr('address') }}\n    set netmask {{ i.ip|ipaddr('netmask') }}\n    set interface {{ i.name }}\n    config ip-range\n      edit 1\n        set start-ip {{ i.ip|ipaddr(4)|ipaddr('address') }}\n        set end-ip {{ i.ip|ipaddr(-5)|ipaddr('address') }}\n      next\n    end\n  next\n  {% endif %}\n  {% endfor %}\nend\n{% endif %}\n","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"01-Edge-Underlay","modification_time":"","name":"01-Edge-Underlay","provision":"","scopetype":"adom","script":"{# 01-Edge-Underlay.j2                                                        #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_leak_summary = project.vrf_leak_summary|default('10.200.255.0/24') %}\n\n{# General settings #}\nconfig system settings\n  set location-id {{ loopback|ipaddr('address') }}\n  set allow-subnet-overlap enable\nend\nconfig system global\n  {% if not project.profiles[profile].ha|default(false) and hostname is defined %}\n  set hostname {{ hostname }}\n  {% endif %}\nend\n\n{# Loop: Configure underlay interfaces #}\n{% for i in project.profiles[profile].interfaces if i.name is defined %}\nconfig system interface\n  edit \"{{i.name}}\"\n    {# IP #}\n    {% if i.ip is defined %}\n    {% if i.ip == 'dhcp' %}\n    set mode dhcp\n    {%  else %}\n    set mode static\n    set ip {{ i.ip }}\n    {% endif %}\n    {% endif %}\n\n    {# VRF #}\n    {% if i.vrf is defined %}\n    set vrf {{ i.vrf }}\n    {% else %}\n    set vrf {{ pe_vrf }}\n    {% endif %}\n\n    {# VLAN #}\n    {% if i.vlanid is defined and i.parent is defined %}\n    set vdom \"root\"\n    set type vlan\n    set vlanid {{ i.vlanid }}\n    set interface {{ i.parent }}\n    {% endif %}\n\n    {# FEX #}\n    {% if i.fex|default(false) %}\n    set type fext-wan\n    {% endif %}       \n\n    {# QoS: Add shaping profile and in/outbandwidth only if interface is of type wan and meta fields are both defined #}\n    {% if i.role == 'wan' and i.outbandwidth is defined %}\n    set estimated-upstream-bandwidth {{ i.outbandwidth }}\n      {% if i.shaping_profile is defined %}\n      set outbandwidth {{ i.outbandwidth }}\n      set egress-shaping-profile {{ i.shaping_profile }}\n      {% endif %}\n    {% endif %}\n    {% if i.role == 'wan' and i.inbandwidth is defined %}\n    set estimated-downstream-bandwidth {{ i.inbandwidth }}\n      {% if i.shaping_profile is defined %}\n      set inbandwidth {{ i.inbandwidth }}\n      set ingress-shaping-profile {{ i.shaping_profile }}\n      {% endif %}\n    {% endif %}\n\n    {# Other settings #}\n    {% if i.role == 'wan' %}\n    set role wan\n    {% endif %}\n    {% if i.role == 'lan' %}\n    set role lan\n    set device-identification enable\n    {% endif %}\n    set allowaccess {{ 'ping' if not i.access|default(false) else i.access }}\n  next\nend\n\n{# Configure FEX parent interface #}\n{% if i.fex|default(false) %}\nconfig system interface\n  edit {{ i.parent }}\n    set mode dhcp\n    set allowaccess ping fabric\n    set monitor-bandwidth enable\n    set role wan\n    unset lldp-reception      \n  next\nend\n{% endif %}\n\n{# VRF Leak #}\n{% if i.vrf is defined and i.allow_dia|default(false) %}\n  {# Configure software vdom-link interface if model is VM #}\n  {% if i.leak_npu_link|default('') == '' %}\n  config system vdom-link\n    edit \"vrf{{ i.vrf }}_leak\"\n    next\n  end\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vdom-link\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vdom-link\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {# Configure vlan interfaces on top of npu link if model is HW #}\n  {% else %}\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}0\"\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}1\"\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {% endif %}\n\n  {# Add default route to pe_vrf for each vrf #}\n  config router static\n    edit {{ 10000 + i.vrf }}\n      set gateway {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}\n      set device vrf{{ i.vrf }}_leak1\n    next\n  end\n\n  {# Configure a zone for easier policy management of vrf leaking #}\n  {% if project.create_vrf_leak_zone|default(true) and i.role == 'lan' %}\n  config system zone\n    edit \"{{ project.pevrf_leak_zone|default('pevrf_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak0\"\n    next\n    edit \"{{ project.vrf_leak_zone|default('vrfs_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak1\"\n    next\n  end\n  {% endif %}\n{% endif %}\n\n{# End Loop: Configure underlay interfaces #}\n{% endfor %}\n\n{# Main Loopback #}\nconfig system interface\n  edit \"Lo\"\n    set vdom \"root\"\n    set type loopback\n    set vrf {{ pe_vrf }}\n    set ip {{ loopback|ipaddr('address') }}/32\n    set allowaccess ping\n  next\nend\n\n{# Create LAN Zone #}\n{% set lan_intf = [] %}\n{% if project.create_lan_zone|default(true) %}\nconfig system zone\n  edit \"{{ project.lan_zone|default('lan_zone') }}\"\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n    {{  lan_intf.append(i.name) or \"\" }}\n    {% endfor %}\n    set interface {{ lan_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Support SD-Branch (Fortilink interface) #}\n{% set fortilink_intf = [] %}\n{% for i in project.profiles[profile].interfaces if i.role == 'sd_branch' and i.name is defined %}\n{{  fortilink_intf.append(i.name) or \"\" }}\n{% endfor %}\n{% if fortilink_intf %}\nconfig system global\n  set switch-controller enable\nend\nconfig system interface\n  edit \"fortilink\"\n    set member {{ fortilink_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Enable DHCP Server on LAN interfaces #}\n{% if project.create_lan_dhcp_server|default(true) %}\nconfig system dhcp server\n  {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n  {% if i.dhcp_server|default(true) %}\n  edit {{ 10 + loop.index0 }}\n    set dns-service default\n    set default-gateway {{ i.ip|ipaddr('address') }}\n    set netmask {{ i.ip|ipaddr('netmask') }}\n    set interface {{ i.name }}\n    config ip-range\n      edit 1\n        set start-ip {{ i.ip|ipaddr(4)|ipaddr('address') }}\n        set end-ip {{ i.ip|ipaddr(-5)|ipaddr('address') }}\n      next\n    end\n  next\n  {% endif %}\n  {% endfor %}\nend\n{% endif %}\n","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after_unknown":{},"before_sensitive":{"variables":[false,false,false,false,false,false,false,false,false,false]},"after_sensitive":{"variables":[false,false,false,false,false,false,false,false,false,false]}}},{"address":"fortimanager_object_cli_template.Hub-MultiRegion","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-MultiRegion","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"04-Hub-MultiRegion","modification_time":"","name":"04-Hub-MultiRegion","provision":"","scopetype":"adom","script":"{# 04-Hub-MultiRegion.j2                                                      #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set hub2hub_ol = [] %}\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n\n{% if project.regions|count \u003e 1  %}\n\n{% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\n  {% for r in project.regions if r != region %}\n    {% for h in project.regions[r].hubs %}\n      {% if i.ol_type in project.hubs[h].overlays %}\n      config vpn ipsec phase1-interface\n        edit \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set interface \"{{ i.name }}\"\n          set ike-version 2\n          {% if project.cert_auth|default(true) %}\n          set authmethod signature\n          set certificate \"{{ project.edge_cert_template|default('Hub') }}\"\n          {% else %}\n          set psksecret {{ project.psk|default('S3cr3t!') }}\n          {% endif %}\n          set keylife 28800\n          set peertype any\n          set proposal aes256gcm-prfsha256\n          {% if project.multireg_advpn|default(false) %}\n          set auto-discovery-sender enable\n          set auto-discovery-receiver enable\n          set auto-discovery-forwarder enable\n          set add-route disable\n          {% else %}\n          set exchange-interface-ip enable\n          {% endif %}\n          set remote-gw {{ project.hubs[h].overlays[i.ol_type].wan_ip }}\n          set encapsulation vpn-id-ipip\n          set exchange-ip-addr4 {{ loopback|ipaddr('address') }}\n          set dpd-retrycount 3\n          set dpd-retryinterval 5\n          set dpd on-idle\n        next\n      end\n      config vpn ipsec phase2-interface\n        edit \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set phase1name \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set proposal aes256gcm\n          set keepalive enable\n          set keylifeseconds 3600\n        next\n      end\n      config system interface\n        edit \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set vrf {{ pe_vrf }}\n        next\n      end\n      {% if project.overlay_stickiness|default(true) %}\n      config router policy\n        edit {{ hub2hub_ol|length * 2 + 11 }}\n          set input-device \"EDGE_{{ i.ol_type }}\"\n          set output-device \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set dst {{ project.lan_summary }}\n        next\n        edit {{ hub2hub_ol|length * 2 + 12 }}\n          set input-device \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set output-device \"EDGE_{{ i.ol_type }}\"\n          set dst {{ project.lan_summary }}\n        next\n      end\n      {% endif %}\n      {{ hub2hub_ol.append(r|upper~'_H'~loop.index~'_'~i.ol_type) or \"\" }}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n{% endfor %}\n\n{% if project.create_hub2hub_zone|default(true) %}\nconfig system zone\n  edit \"{{project.hub2hub_zone|default('hub2hub_overlay')}}\"\n    append interface {{ hub2hub_ol|join(' ') }}\n  next\nend\n{% endif %}\n\n{% if project.multireg_advpn|default(false) %}\n{# Advertise loopback summaries between the regions #}\nconfig router access-list\n  {# Regional loopback summary #}\n  edit \"LO_REGIONAL_SUMMARY\"\n    config rule\n      edit 1\n        set prefix {{ project.regions[region].lo_summary }}\n        set exact-match enable\n      next\n    end\n  next\nend\nconfig router route-map\n  edit \"HUB2HUB_OUT\"\n    config rule\n      edit 1\n        {# Do not readvertise regional loopback summary to remote Edges and other regions #}\n        set match-ip-address \"LO_REGIONAL_SUMMARY\"\n        set set-community no-advertise\n      next\n      edit 100\n      next\n    end\n  next\n  edit \"EDGE_OUT\"\n    config rule\n      edit 1\n        {# Do not advertise regional loopback summary to Edges (they already receive global summary) #}\n        set match-ip-address \"LO_REGIONAL_SUMMARY\"\n        set action deny\n      next\n      edit 100\n      next\n    end\n  next\nend\nconfig router bgp\n  config neighbor-group\n    edit \"EDGE\"\n      set route-map-out EDGE_OUT\n      {# Preserve next-hop of prefixes coming from remote regions #}\n      set attribute-unchanged-vpnv4 next-hop\n    next\n  end\n  config network\n    edit 103\n      set prefix {{ project.regions[region].lo_summary }}\n    next\n  end\nend\nconfig router static\n  edit 103\n    set dst {{ project.regions[region].lo_summary }}\n    set blackhole enable\n    set vrf \"{{ pe_vrf }}\"\n    set comment \"Regional loopback summary\"\n  next\nend\n{% else %}\n{# Advertise regional LAN summaries between the regions #}\nconfig router static\n  {% for v in project.regions[region].vrfs %}\n  edit {{ 110 + v.id }}\n    set dst {{ v.lan_summary }}\n    set blackhole enable\n    set vrf \"{{ v.id }}\"\n    set comment \"Regional LAN summary (VRF={{ v.id }})\"\n  next\n  {% endfor %}\nend\nconfig router access-list\n  edit \"LAN_REGIONAL_SUMMARY\"\n    config rule\n      {% for v in project.regions[region].vrfs %}\n      edit {{ v.id }}\n        set prefix {{ v.lan_summary }}\n        set exact-match enable\n      next\n      {% endfor %}\n    end\n  next\nend\nconfig router route-map\n  edit \"HUB2HUB_OUT\"\n    config rule\n      edit 1\n        set match-ip-address \"LAN_REGIONAL_SUMMARY\"\n        unset set-community\n      next\n      edit 1000\n        set action deny\n      next\n    end\n  next\nend\nconfig router bgp\n  config redistribute \"static\"\n    set status enable\n    set route-map \"HUB2HUB_OUT\"\n  end\nend\n{% endif %}\n\nconfig router bgp\n  config neighbor\n    {% for r in project.regions if r != region %}\n    {% for h in project.regions[r].hubs %}\n    edit {{ project.hubs[h].lo_bgp }}\n      set ebgp-enforce-multihop enable\n      set soft-reconfiguration enable\n      set advertisement-interval 1\n      set link-down-failover enable\n      set interface \"Lo\"\n      set update-source \"Lo\"\n      {% if project.multireg_advpn|default(false) %}\n      set attribute-unchanged-vpnv4 next-hop\n      set route-map-out \"HUB2HUB_OUT\"\n      {% else %}\n      set route-map-out-vpnv4 \"HUB2HUB_OUT\"\n      {% endif %}\n      set connect-timer 1\n      set remote-as {{ project.regions[r].as }}\n    next\n    {% endfor %}\n    {% endfor %}\n  end\nend\n\n{% endif %}\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"04-Hub-MultiRegion","modification_time":"","name":"04-Hub-MultiRegion","provision":"","scopetype":"adom","script":"{# 04-Hub-MultiRegion.j2                                                      #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set hub2hub_ol = [] %}\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n\n{% if project.regions|count \u003e 1  %}\n\n{% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\n  {% for r in project.regions if r != region %}\n    {% for h in project.regions[r].hubs %}\n      {% if i.ol_type in project.hubs[h].overlays %}\n      config vpn ipsec phase1-interface\n        edit \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set interface \"{{ i.name }}\"\n          set ike-version 2\n          {% if project.cert_auth|default(true) %}\n          set authmethod signature\n          set certificate \"{{ project.edge_cert_template|default('Hub') }}\"\n          {% else %}\n          set psksecret {{ project.psk|default('S3cr3t!') }}\n          {% endif %}\n          set keylife 28800\n          set peertype any\n          set proposal aes256gcm-prfsha256\n          {% if project.multireg_advpn|default(false) %}\n          set auto-discovery-sender enable\n          set auto-discovery-receiver enable\n          set auto-discovery-forwarder enable\n          set add-route disable\n          {% else %}\n          set exchange-interface-ip enable\n          {% endif %}\n          set remote-gw {{ project.hubs[h].overlays[i.ol_type].wan_ip }}\n          set encapsulation vpn-id-ipip\n          set exchange-ip-addr4 {{ loopback|ipaddr('address') }}\n          set dpd-retrycount 3\n          set dpd-retryinterval 5\n          set dpd on-idle\n        next\n      end\n      config vpn ipsec phase2-interface\n        edit \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set phase1name \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set proposal aes256gcm\n          set keepalive enable\n          set keylifeseconds 3600\n        next\n      end\n      config system interface\n        edit \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set vrf {{ pe_vrf }}\n        next\n      end\n      {% if project.overlay_stickiness|default(true) %}\n      config router policy\n        edit {{ hub2hub_ol|length * 2 + 11 }}\n          set input-device \"EDGE_{{ i.ol_type }}\"\n          set output-device \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set dst {{ project.lan_summary }}\n        next\n        edit {{ hub2hub_ol|length * 2 + 12 }}\n          set input-device \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set output-device \"EDGE_{{ i.ol_type }}\"\n          set dst {{ project.lan_summary }}\n        next\n      end\n      {% endif %}\n      {{ hub2hub_ol.append(r|upper~'_H'~loop.index~'_'~i.ol_type) or \"\" }}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n{% endfor %}\n\n{% if project.create_hub2hub_zone|default(true) %}\nconfig system zone\n  edit \"{{project.hub2hub_zone|default('hub2hub_overlay')}}\"\n    append interface {{ hub2hub_ol|join(' ') }}\n  next\nend\n{% endif %}\n\n{% if project.multireg_advpn|default(false) %}\n{# Advertise loopback summaries between the regions #}\nconfig router access-list\n  {# Regional loopback summary #}\n  edit \"LO_REGIONAL_SUMMARY\"\n    config rule\n      edit 1\n        set prefix {{ project.regions[region].lo_summary }}\n        set exact-match enable\n      next\n    end\n  next\nend\nconfig router route-map\n  edit \"HUB2HUB_OUT\"\n    config rule\n      edit 1\n        {# Do not readvertise regional loopback summary to remote Edges and other regions #}\n        set match-ip-address \"LO_REGIONAL_SUMMARY\"\n        set set-community no-advertise\n      next\n      edit 100\n      next\n    end\n  next\n  edit \"EDGE_OUT\"\n    config rule\n      edit 1\n        {# Do not advertise regional loopback summary to Edges (they already receive global summary) #}\n        set match-ip-address \"LO_REGIONAL_SUMMARY\"\n        set action deny\n      next\n      edit 100\n      next\n    end\n  next\nend\nconfig router bgp\n  config neighbor-group\n    edit \"EDGE\"\n      set route-map-out EDGE_OUT\n      {# Preserve next-hop of prefixes coming from remote regions #}\n      set attribute-unchanged-vpnv4 next-hop\n    next\n  end\n  config network\n    edit 103\n      set prefix {{ project.regions[region].lo_summary }}\n    next\n  end\nend\nconfig router static\n  edit 103\n    set dst {{ project.regions[region].lo_summary }}\n    set blackhole enable\n    set vrf \"{{ pe_vrf }}\"\n    set comment \"Regional loopback summary\"\n  next\nend\n{% else %}\n{# Advertise regional LAN summaries between the regions #}\nconfig router static\n  {% for v in project.regions[region].vrfs %}\n  edit {{ 110 + v.id }}\n    set dst {{ v.lan_summary }}\n    set blackhole enable\n    set vrf \"{{ v.id }}\"\n    set comment \"Regional LAN summary (VRF={{ v.id }})\"\n  next\n  {% endfor %}\nend\nconfig router access-list\n  edit \"LAN_REGIONAL_SUMMARY\"\n    config rule\n      {% for v in project.regions[region].vrfs %}\n      edit {{ v.id }}\n        set prefix {{ v.lan_summary }}\n        set exact-match enable\n      next\n      {% endfor %}\n    end\n  next\nend\nconfig router route-map\n  edit \"HUB2HUB_OUT\"\n    config rule\n      edit 1\n        set match-ip-address \"LAN_REGIONAL_SUMMARY\"\n        unset set-community\n      next\n      edit 1000\n        set action deny\n      next\n    end\n  next\nend\nconfig router bgp\n  config redistribute \"static\"\n    set status enable\n    set route-map \"HUB2HUB_OUT\"\n  end\nend\n{% endif %}\n\nconfig router bgp\n  config neighbor\n    {% for r in project.regions if r != region %}\n    {% for h in project.regions[r].hubs %}\n    edit {{ project.hubs[h].lo_bgp }}\n      set ebgp-enforce-multihop enable\n      set soft-reconfiguration enable\n      set advertisement-interval 1\n      set link-down-failover enable\n      set interface \"Lo\"\n      set update-source \"Lo\"\n      {% if project.multireg_advpn|default(false) %}\n      set attribute-unchanged-vpnv4 next-hop\n      set route-map-out \"HUB2HUB_OUT\"\n      {% else %}\n      set route-map-out-vpnv4 \"HUB2HUB_OUT\"\n      {% endif %}\n      set connect-timer 1\n      set remote-as {{ project.regions[r].as }}\n    next\n    {% endfor %}\n    {% endfor %}\n  end\nend\n\n{% endif %}\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after_unknown":{},"before_sensitive":{"variables":[false,false,false,false,false,false,false,false,false]},"after_sensitive":{"variables":[false,false,false,false,false,false,false,false,false]}}},{"address":"fortimanager_object_cli_template.Hub-Overlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-Overlay","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"02-Hub-Overlay","modification_time":"","name":"02-Hub-Overlay","provision":"","scopetype":"adom","script":"{# 02-Hub-Overlay.j2                                                          #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n\n{% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\nconfig vpn ipsec phase1-interface\n  edit \"EDGE_{{ i.ol_type }}\"\n    set type dynamic\n    set interface \"{{ i.name }}\"\n    set ike-version 2\n    {% if project.cert_auth|default(true) %}\n    set authmethod signature\n    set certificate \"{{ project.edge_cert_template|default('Hub') }}\"\n    {% else %}\n    set psksecret {{ project.psk|default('S3cr3t!') }}\n    {% endif %}\n    set peertype any\n    set proposal aes256gcm-prfsha256 aes256-sha256\n    {% if project.intrareg_advpn|default(true) %}\n    set auto-discovery-sender enable\n    {% else %}\n    set auto-discovery-sender disable\n    set exchange-interface-ip enable\n    {% endif %}    \n    set encapsulation vpn-id-ipip\n    set exchange-ip-addr4 {{ loopback|ipaddr('address') }}\n    set add-route disable\n    set network-overlay enable\n    set network-id {{ project.hubs[hostname].overlays[i.ol_type].network_id }}\n    set dpd-retrycount 2\n    set dpd-retryinterval 5\n    set dpd on-idle\n  next\nend\nconfig vpn ipsec phase2-interface\n  edit \"EDGE_{{ i.ol_type }}\"\n    set phase1name \"EDGE_{{ i.ol_type }}\"\n    set proposal aes256gcm\n    set keepalive enable\n  next\nend\nconfig system interface\n  edit \"EDGE_{{ i.ol_type }}\"\n    set vrf {{ pe_vrf }}\n  next\nend\n{% endfor %}\n","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"02-Hub-Overlay","modification_time":"","name":"02-Hub-Overlay","provision":"","scopetype":"adom","script":"{# 02-Hub-Overlay.j2                                                          #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n\n{% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\nconfig vpn ipsec phase1-interface\n  edit \"EDGE_{{ i.ol_type }}\"\n    set type dynamic\n    set interface \"{{ i.name }}\"\n    set ike-version 2\n    {% if project.cert_auth|default(true) %}\n    set authmethod signature\n    set certificate \"{{ project.edge_cert_template|default('Hub') }}\"\n    {% else %}\n    set psksecret {{ project.psk|default('S3cr3t!') }}\n    {% endif %}\n    set peertype any\n    set proposal aes256gcm-prfsha256 aes256-sha256\n    {% if project.intrareg_advpn|default(true) %}\n    set auto-discovery-sender enable\n    {% else %}\n    set auto-discovery-sender disable\n    set exchange-interface-ip enable\n    {% endif %}    \n    set encapsulation vpn-id-ipip\n    set exchange-ip-addr4 {{ loopback|ipaddr('address') }}\n    set add-route disable\n    set network-overlay enable\n    set network-id {{ project.hubs[hostname].overlays[i.ol_type].network_id }}\n    set dpd-retrycount 2\n    set dpd-retryinterval 5\n    set dpd on-idle\n  next\nend\nconfig vpn ipsec phase2-interface\n  edit \"EDGE_{{ i.ol_type }}\"\n    set phase1name \"EDGE_{{ i.ol_type }}\"\n    set proposal aes256gcm\n    set keepalive enable\n  next\nend\nconfig system interface\n  edit \"EDGE_{{ i.ol_type }}\"\n    set vrf {{ pe_vrf }}\n  next\nend\n{% endfor %}\n","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after_unknown":{},"before_sensitive":{"variables":[false,false,false,false,false,false,false,false,false,false]},"after_sensitive":{"variables":[false,false,false,false,false,false,false,false,false,false]}}},{"address":"fortimanager_object_cli_template.Hub-Routing","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-Routing","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"03-Hub-Routing","modification_time":"","name":"03-Hub-Routing","provision":"","scopetype":"adom","script":"{# 03-Hub-Routing.j2                                                          #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_rt_as = project.vrf_rt_as|default('65000') %}\n\nconfig router community-list\n  edit \"SLA_OK\"\n    config rule\n      edit 1\n        set action permit\n        set match \"{{ project.regions[region].as }}:99\"\n      next\n    end\n  next\nend\nconfig router route-map\n  edit \"LOCAL_REGION\"\n    config rule\n      edit 1\n        {# Do not advertise to EBGP peers (outside the region #}\n        set set-community \"no-export\"\n      next\n    end\n  next\nend\nconfig router bgp\n  set as {{ project.regions[region].as }}\n  set router-id {{ loopback|ipaddr('address') }}\n  set keepalive-timer 15\n  set holdtime-timer 45\n  set ibgp-multipath enable\n  set ebgp-multipath enable\n  set recursive-next-hop enable\n  set recursive-inherit-priority enable\n  config neighbor-group\n    edit \"EDGE\"\n      set soft-reconfiguration-vpnv4 enable\n      set advertisement-interval 1\n      set next-hop-self enable\n      set remote-as {{ project.regions[region].as }}\n      set interface \"Lo\"\n      set update-source \"Lo\"\n      {% if project.intrareg_advpn|default(true) %}\n      set route-reflector-client-vpnv4 enable\n      {% else %}\n      set route-reflector-client-vpnv4 disable\n      {% endif %}      \n    next\n  end\n  config neighbor-range\n    edit 1\n      set prefix {{ project.lo_summary }}\n      set neighbor-group \"EDGE\"\n    next\n  end\n  config network\n    edit 1\n      set prefix {{ project.lo_summary }}\n      set route-map \"LOCAL_REGION\"\n    next\n    {% set network_to_advertise = [] %}\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined and i.advertise|default(true) %}\n      {% if not i.ip in network_to_advertise %}\n        {{ network_to_advertise.append(i.ip) or \"\" }}\n      {% endif %}\n    {% endfor %}\n\n    {% for i in network_to_advertise if i|length %}\n      edit {{ loop.index + 1 }}\n        set prefix {{ i|ipaddr(0) }}\n      next\n    {% endfor %}\n    end\n  config vrf\n    edit \"{{ pe_vrf }}\"\n      set role pe\n    next\n    {% for v in project.regions[region].vrfs %}\n    edit \"{{ v.id }}\"\n      set role \"ce\"\n      set rd \"{{ vrf_rt_as }}:{{ v.id }}\"\n      set import-rt \"{{ vrf_rt_as }}:{{ v.id }}\"\n      set export-rt \"{{ vrf_rt_as }}:{{ v.id }}\"\n    next\n    {% endfor %}\n  end\nend\n\n{% if project.overlay_stickiness|default(true) %}\nconfig router policy\n  {% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\n  edit {{ loop.index }}\n    set input-device \"EDGE_{{ i.ol_type }}\"\n    set output-device \"EDGE_{{ i.ol_type }}\"\n    set dst {{ project.lan_summary }}\n  next\n  {% endfor %}\nend\n{% endif %}\n\nconfig router static\n  edit 101\n    set dst {{ project.lan_summary }}\n    set blackhole enable\n    set vrf \"{{ pe_vrf }}\"\n    set comment \"Avoid potential leak of corporate traffic to underlay\"\n  next\n  edit 102\n    set dst {{ project.lo_summary }}\n    set blackhole enable\n    set vrf \"{{ pe_vrf }}\"\n  next\nend\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"03-Hub-Routing","modification_time":"","name":"03-Hub-Routing","provision":"","scopetype":"adom","script":"{# 03-Hub-Routing.j2                                                          #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_rt_as = project.vrf_rt_as|default('65000') %}\n\nconfig router community-list\n  edit \"SLA_OK\"\n    config rule\n      edit 1\n        set action permit\n        set match \"{{ project.regions[region].as }}:99\"\n      next\n    end\n  next\nend\nconfig router route-map\n  edit \"LOCAL_REGION\"\n    config rule\n      edit 1\n        {# Do not advertise to EBGP peers (outside the region #}\n        set set-community \"no-export\"\n      next\n    end\n  next\nend\nconfig router bgp\n  set as {{ project.regions[region].as }}\n  set router-id {{ loopback|ipaddr('address') }}\n  set keepalive-timer 15\n  set holdtime-timer 45\n  set ibgp-multipath enable\n  set ebgp-multipath enable\n  set recursive-next-hop enable\n  set recursive-inherit-priority enable\n  config neighbor-group\n    edit \"EDGE\"\n      set soft-reconfiguration-vpnv4 enable\n      set advertisement-interval 1\n      set next-hop-self enable\n      set remote-as {{ project.regions[region].as }}\n      set interface \"Lo\"\n      set update-source \"Lo\"\n      {% if project.intrareg_advpn|default(true) %}\n      set route-reflector-client-vpnv4 enable\n      {% else %}\n      set route-reflector-client-vpnv4 disable\n      {% endif %}      \n    next\n  end\n  config neighbor-range\n    edit 1\n      set prefix {{ project.lo_summary }}\n      set neighbor-group \"EDGE\"\n    next\n  end\n  config network\n    edit 1\n      set prefix {{ project.lo_summary }}\n      set route-map \"LOCAL_REGION\"\n    next\n    {% set network_to_advertise = [] %}\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined and i.advertise|default(true) %}\n      {% if not i.ip in network_to_advertise %}\n        {{ network_to_advertise.append(i.ip) or \"\" }}\n      {% endif %}\n    {% endfor %}\n\n    {% for i in network_to_advertise if i|length %}\n      edit {{ loop.index + 1 }}\n        set prefix {{ i|ipaddr(0) }}\n      next\n    {% endfor %}\n    end\n  config vrf\n    edit \"{{ pe_vrf }}\"\n      set role pe\n    next\n    {% for v in project.regions[region].vrfs %}\n    edit \"{{ v.id }}\"\n      set role \"ce\"\n      set rd \"{{ vrf_rt_as }}:{{ v.id }}\"\n      set import-rt \"{{ vrf_rt_as }}:{{ v.id }}\"\n      set export-rt \"{{ vrf_rt_as }}:{{ v.id }}\"\n    next\n    {% endfor %}\n  end\nend\n\n{% if project.overlay_stickiness|default(true) %}\nconfig router policy\n  {% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\n  edit {{ loop.index }}\n    set input-device \"EDGE_{{ i.ol_type }}\"\n    set output-device \"EDGE_{{ i.ol_type }}\"\n    set dst {{ project.lan_summary }}\n  next\n  {% endfor %}\nend\n{% endif %}\n\nconfig router static\n  edit 101\n    set dst {{ project.lan_summary }}\n    set blackhole enable\n    set vrf \"{{ pe_vrf }}\"\n    set comment \"Avoid potential leak of corporate traffic to underlay\"\n  next\n  edit 102\n    set dst {{ project.lo_summary }}\n    set blackhole enable\n    set vrf \"{{ pe_vrf }}\"\n  next\nend\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after_unknown":{},"before_sensitive":{"variables":[false,false,false,false,false,false,false,false,false]},"after_sensitive":{"variables":[false,false,false,false,false,false,false,false,false]}}},{"address":"fortimanager_object_cli_template.Hub-Underlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-Underlay","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"01-Hub-Underlay","modification_time":"","name":"01-Hub-Underlay","provision":"","scopetype":"adom","script":"{# 01-Hub-Underlay.j2                                                         #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_leak_summary = project.vrf_leak_summary|default('10.200.255.0/24') %}\n\n{# General settings #}\nconfig system settings\n  set location-id {{ loopback|ipaddr('address') }}\n  set tcp-session-without-syn enable  \n  set allow-subnet-overlap enable\nend\nconfig system global\n  {% if not project.profiles[profile].ha|default(false) and hostname is defined %}\n  set hostname {{ hostname }}\n  {% endif %}\nend\n\n{# Loop: Configure underlay interfaces #}\n{% for i in project.profiles[profile].interfaces if i.name is defined %}\nconfig system interface\n  edit \"{{i.name}}\"\n    {# IP #}\n    {% if i.ip is defined %}\n    {% if i.ip == 'dhcp' %}\n    set mode dhcp\n    {%  else %}\n    set mode static\n    set ip {{ i.ip }}\n    {% endif %}\n    {% endif %}\n\n    {# VRF #}\n    {% if i.vrf is defined %}\n    set vrf {{ i.vrf }}\n    {% else %}\n    set vrf {{ pe_vrf }}\n    {% endif %}\n\n    {# VLAN #}\n    {% if i.vlanid is defined and i.parent is defined %}\n    set vdom \"root\"\n    set type vlan\n    set vlanid {{ i.vlanid }}\n    set interface {{ i.parent }}\n    {% endif %}\n\n    {# Other settings #}\n    {% if i.role == 'wan' %}\n    set role wan\n    {% endif %}\n    {% if i.role == 'lan' %}\n    set role lan\n    set device-identification enable\n    {% endif %}\n    set allowaccess {{ 'ping' if not i.access|default(false) else i.access }}\n  next\nend\n\n{# VRF Leak #}\n{% if i.vrf is defined and i.allow_dia|default(false) %}\n  {# Configure software vdom-link interface if model is VM #}\n  {% if i.leak_npu_link|default('') == '' %}\n  config system vdom-link\n    edit \"vrf{{ i.vrf }}_leak\"\n    next\n  end\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vdom-link\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vdom-link\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {# Configure vlan interfaces on top of npu link if model is HW #}\n  {% else %}\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}0\"\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}1\"\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {% endif %}\n  {# Add a default route to pe_vrf for each vrf #}\n  config router static\n    edit {{ 10000 + i.vrf }}\n      set gateway {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}    \n      set device vrf{{ i.vrf }}_leak1\n    next\n  end\n\n  {# Configure a zone for easier policy management of vrf leaking #}\n  {% if project.create_vrf_leak_zone|default(true) and i.role == 'lan' %}\n  config system zone\n    edit \"{{ project.pevrf_leak_zone|default('pevrf_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak0\"\n    next\n    edit \"{{ project.vrf_leak_zone|default('vrfs_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak1\"\n    next\n  end\n  {% endif %}\n{% endif %}\n\n{# End Loop: Configure underlay interfaces #}\n{% endfor %}\n\n{# Loopback for incoming health-check probes #}\nconfig system interface\n  edit \"Lo-HC\"\n    set vdom \"root\"\n    set type loopback\n    set vrf {{ pe_vrf }}\n    set ip {{ project.hub_hc_server|default('10.200.99.1') }}/32\n    set allowaccess ping\n  next\n  {# Main Loopback #}\n  edit \"Lo\"\n    set vdom \"root\"\n    set type loopback\n    set vrf {{ pe_vrf }}\n    set ip {{ loopback|ipaddr('address') }}/32\n    set allowaccess ping\n  next\nend\n\n{# Create LAN Zone #}\n{% set lan_intf = [] %}\n{% if project.create_lan_zone|default(true) %}\nconfig system zone\n  edit \"{{ project.lan_zone|default('lan_zone') }}\"\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n    {{  lan_intf.append(i.name) or \"\" }}\n    {% endfor %}\n    set interface {{ lan_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Enable DHCP Server on LAN interfaces #}\n{% if project.create_lan_dhcp_server|default(true) %}\nconfig system dhcp server\n  {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n  {% if i.dhcp_server|default(true) %}\n  edit {{ 10 + loop.index0 }}\n    set dns-service default\n    set default-gateway {{ i.ip|ipaddr('address') }}\n    set netmask {{ i.ip|ipaddr('netmask') }}\n    set interface {{ i.name }}\n    config ip-range\n      edit 1\n        set start-ip {{ i.ip|ipaddr(4)|ipaddr('address') }}\n        set end-ip {{ i.ip|ipaddr(-5)|ipaddr('address') }}\n      next\n    end\n  next\n  {% endif %}\n  {% endfor %}\nend\n{% endif %}\n","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"01-Hub-Underlay","modification_time":"","name":"01-Hub-Underlay","provision":"","scopetype":"adom","script":"{# 01-Hub-Underlay.j2                                                         #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_leak_summary = project.vrf_leak_summary|default('10.200.255.0/24') %}\n\n{# General settings #}\nconfig system settings\n  set location-id {{ loopback|ipaddr('address') }}\n  set tcp-session-without-syn enable  \n  set allow-subnet-overlap enable\nend\nconfig system global\n  {% if not project.profiles[profile].ha|default(false) and hostname is defined %}\n  set hostname {{ hostname }}\n  {% endif %}\nend\n\n{# Loop: Configure underlay interfaces #}\n{% for i in project.profiles[profile].interfaces if i.name is defined %}\nconfig system interface\n  edit \"{{i.name}}\"\n    {# IP #}\n    {% if i.ip is defined %}\n    {% if i.ip == 'dhcp' %}\n    set mode dhcp\n    {%  else %}\n    set mode static\n    set ip {{ i.ip }}\n    {% endif %}\n    {% endif %}\n\n    {# VRF #}\n    {% if i.vrf is defined %}\n    set vrf {{ i.vrf }}\n    {% else %}\n    set vrf {{ pe_vrf }}\n    {% endif %}\n\n    {# VLAN #}\n    {% if i.vlanid is defined and i.parent is defined %}\n    set vdom \"root\"\n    set type vlan\n    set vlanid {{ i.vlanid }}\n    set interface {{ i.parent }}\n    {% endif %}\n\n    {# Other settings #}\n    {% if i.role == 'wan' %}\n    set role wan\n    {% endif %}\n    {% if i.role == 'lan' %}\n    set role lan\n    set device-identification enable\n    {% endif %}\n    set allowaccess {{ 'ping' if not i.access|default(false) else i.access }}\n  next\nend\n\n{# VRF Leak #}\n{% if i.vrf is defined and i.allow_dia|default(false) %}\n  {# Configure software vdom-link interface if model is VM #}\n  {% if i.leak_npu_link|default('') == '' %}\n  config system vdom-link\n    edit \"vrf{{ i.vrf }}_leak\"\n    next\n  end\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vdom-link\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vdom-link\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {# Configure vlan interfaces on top of npu link if model is HW #}\n  {% else %}\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}0\"\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}1\"\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {% endif %}\n  {# Add a default route to pe_vrf for each vrf #}\n  config router static\n    edit {{ 10000 + i.vrf }}\n      set gateway {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}    \n      set device vrf{{ i.vrf }}_leak1\n    next\n  end\n\n  {# Configure a zone for easier policy management of vrf leaking #}\n  {% if project.create_vrf_leak_zone|default(true) and i.role == 'lan' %}\n  config system zone\n    edit \"{{ project.pevrf_leak_zone|default('pevrf_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak0\"\n    next\n    edit \"{{ project.vrf_leak_zone|default('vrfs_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak1\"\n    next\n  end\n  {% endif %}\n{% endif %}\n\n{# End Loop: Configure underlay interfaces #}\n{% endfor %}\n\n{# Loopback for incoming health-check probes #}\nconfig system interface\n  edit \"Lo-HC\"\n    set vdom \"root\"\n    set type loopback\n    set vrf {{ pe_vrf }}\n    set ip {{ project.hub_hc_server|default('10.200.99.1') }}/32\n    set allowaccess ping\n  next\n  {# Main Loopback #}\n  edit \"Lo\"\n    set vdom \"root\"\n    set type loopback\n    set vrf {{ pe_vrf }}\n    set ip {{ loopback|ipaddr('address') }}/32\n    set allowaccess ping\n  next\nend\n\n{# Create LAN Zone #}\n{% set lan_intf = [] %}\n{% if project.create_lan_zone|default(true) %}\nconfig system zone\n  edit \"{{ project.lan_zone|default('lan_zone') }}\"\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n    {{  lan_intf.append(i.name) or \"\" }}\n    {% endfor %}\n    set interface {{ lan_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Enable DHCP Server on LAN interfaces #}\n{% if project.create_lan_dhcp_server|default(true) %}\nconfig system dhcp server\n  {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n  {% if i.dhcp_server|default(true) %}\n  edit {{ 10 + loop.index0 }}\n    set dns-service default\n    set default-gateway {{ i.ip|ipaddr('address') }}\n    set netmask {{ i.ip|ipaddr('netmask') }}\n    set interface {{ i.name }}\n    config ip-range\n      edit 1\n        set start-ip {{ i.ip|ipaddr(4)|ipaddr('address') }}\n        set end-ip {{ i.ip|ipaddr(-5)|ipaddr('address') }}\n      next\n    end\n  next\n  {% endif %}\n  {% endfor %}\nend\n{% endif %}\n","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after_unknown":{},"before_sensitive":{"variables":[false,false,false,false,false,false,false,false,false,false]},"after_sensitive":{"variables":[false,false,false,false,false,false,false,false,false,false]}}},{"address":"fortimanager_object_cli_template.Project","mode":"managed","type":"fortimanager_object_cli_template","name":"Project","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["update"],"before":{"adom":"createdByTerraform","description":"This is a Terraform example to build a project","id":"Project","modification_time":"","name":"Project","provision":"","scopetype":"adom","script":"{#                            Project Template                                #}\n{# -------------------------------------------------------------------------- #}\n{# This file describes the project: its Regions, Hubs and Device Profiles     #}\n{# Normally, this is the only file that needs to be edited between            #}\n{# different projects                                                         #}\n{# -------------------------------------------------------------------------- #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# Please contact your Fortinet representatives for more details              #}\n\n{#\n  Per-device variables used:\n  - Required:\n    - hostname\n    - loopback\n    - profile\n    - region\n    - lan_ip_edu\n    - lan_ip_fin\n    - mpls_wan_ip (whenever the profile includes MPLS link)\n    - mpls_wan_gateway (whenever the profile includes MPLS link)\n  - Optional:\n    - outbandwidth\n    - inbandwidth\n    - shaping_profile\n#}\n\n{# Optional Settings #}\n{% set multireg_advpn = true %}\n{% set cert_auth = false %}\n\n{#  Mandatory Global Definitions #}\n{% set lo_summary = '10.200.0.0/14' %}\n{% set lan_summary = '10.0.0.0/8' %}\n\n{# Regions #}\n{% set regions = {\n    'West': {\n      'as': '65001',\n      'lo_summary': '10.200.1.0/24',\n      'hubs': [ 'site1-H1', 'site1-H2' ],\n      'vrfs': [\n        {\n          'id': 11,\n          'lan_summary': '10.0.0.0/14'\n        },\n        {\n          'id': 12,\n          'lan_summary': '10.0.0.0/14'\n        }\n      ]\n    },\n    'East': {\n      'as': '65002',\n      'lo_summary': '10.200.2.0/24',\n      'hubs': [ 'site2-H1' ],\n      'vrfs': [\n        {\n          'id': 11,\n          'lan_summary': '10.4.0.0/14'\n        },\n        {\n          'id': 12,\n          'lan_summary': '10.4.0.0/14'\n        }\n      ]\n    }\n  }\n%}\n\n{# Device Profiles #}\n{% set profiles = {\n\n    'Silver': {\n      'interfaces': [\n        {\n          'name': 'port1',\n          'role': 'wan',\n          'ol_type': 'ISP1',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'shaping_profile': shaping_profile,\n          'dia': true\n        },\n        {\n          'name': 'port2',\n          'role': 'wan',\n          'ol_type': 'MPLS',\n          'ip': mpls_wan_ip,\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'shaping_profile': shaping_profile\n        },\n        {\n          'name': 'port3',\n          'role': 'lan',\n          'vrf': 11,\n          'allow_dia': true,\n          'ip': lan_ip_edu\n        },\n        {\n          'name': 'port4',\n          'role': 'lan',\n          'vrf': 12,\n          'ip': lan_ip_fin\n        }\n      ]\n    },\n\n    'Gold': {\n      'interfaces': [\n        {\n          'name': 'port1',\n          'role': 'wan',\n          'ol_type': 'ISP1',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'dia': true\n        },\n        {\n          'name': 'port2',\n          'role': 'wan',\n          'ol_type': 'ISP2',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'dia': true\n        },\n        {\n          'name': 'port3',\n          'role': 'wan',\n          'ol_type': 'MPLS',\n          'ip': mpls_wan_ip,\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth\n        },\n        {\n          'name': 'port4',\n          'role': 'lan',\n          'vrf': 11,\n          'allow_dia': true,\n          'ip': lan_ip_edu\n        },\n        {\n          'name': 'port5',\n          'role': 'lan',\n          'vrf': 12,\n          'ip': lan_ip_fin\n        }\n      ]\n    }\n\n  }\n%}\n\n{# Hubs #}\n{% set hubs = {\n\n    'site1-H1': {\n      'lo_bgp': '10.200.1.253',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.1.1',\n          'network_id': '11'\n        },\n        'ISP2': {\n          'wan_ip': '100.64.1.9',\n          'network_id': '12'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.1.5',\n          'network_id': '13'\n        }\n      }\n    },\n\n    'site1-H2': {\n      'lo_bgp': '10.200.1.254',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.2.1',\n          'network_id': '21'\n        },\n        'ISP2': {\n          'wan_ip': '100.64.2.9',\n          'network_id': '22'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.2.5',\n          'network_id': '23'\n        }\n      }\n    },\n\n    'site2-H1': {\n      'lo_bgp': '10.200.2.253',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.4.1',\n          'network_id': '41'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.4.5',\n          'network_id': '43'\n        }\n      }\n    }\n\n  }\n%}","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","mpls_wan_ip","outbandwidth","shaping_profile"]},"after":{"adom":"createdByTerraform","description":"This is a Terraform example to build a project","id":"Project","modification_time":"","name":"Project","provision":"","scopetype":"adom","script":"{#                            Project Template                                #}\n{# -------------------------------------------------------------------------- #}\n{# This file describes the project: its Regions, Hubs and Device Profiles     #}\n{# Normally, this is the only file that needs to be edited between            #}\n{# different projects                                                         #}\n{# -------------------------------------------------------------------------- #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# Please contact your Fortinet representatives for more details              #}\n\n{#\n  Per-device variables used:\n  - Required:\n    - hostname\n    - loopback\n    - profile\n    - region\n    - lan_ip_edu\n    - lan_ip_fin\n    - mpls_wan_ip (whenever the profile includes MPLS link)\n    - mpls_wan_gateway (whenever the profile includes MPLS link)\n  - Optional:\n    - outbandwidth\n    - inbandwidth\n    - shaping_profile\n#}\n\n{# Optional Settings #}\n{% set multireg_advpn = true %}\n{% set cert_auth = false %}\n\n{#  Mandatory Global Definitions #}\n{% set lo_summary = '10.200.0.0/14' %}\n{% set lan_summary = '10.0.0.0/8' %}\n\n{# Regions #}\n{% set regions = {\n    'West': {\n      'as': '65001',\n      'lo_summary': '10.200.1.0/24',\n      'hubs': [ 'site1-H1', 'site1-H2' ],\n      'vrfs': [\n        {\n          'id': 11,\n          'lan_summary': '10.0.0.0/14'\n        },\n        {\n          'id': 12,\n          'lan_summary': '10.0.0.0/14'\n        }\n      ]\n    },\n    'East': {\n      'as': '65002',\n      'lo_summary': '10.200.2.0/24',\n      'hubs': [ 'site2-H1' ],\n      'vrfs': [\n        {\n          'id': 11,\n          'lan_summary': '10.4.0.0/14'\n        },\n        {\n          'id': 12,\n          'lan_summary': '10.4.0.0/14'\n        }\n      ]\n    }\n  }\n%}\n\n{# Device Profiles #}\n{% set profiles = {\n\n    'Silver': {\n      'interfaces': [\n        {\n          'name': 'port1',\n          'role': 'wan',\n          'ol_type': 'ISP1',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'shaping_profile': shaping_profile,\n          'dia': true\n        },\n        {\n          'name': 'port2',\n          'role': 'wan',\n          'ol_type': 'MPLS',\n          'ip': mpls_wan_ip,\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'shaping_profile': shaping_profile\n        },\n        {\n          'name': 'port3',\n          'role': 'lan',\n          'vrf': 11,\n          'allow_dia': true,\n          'ip': lan_ip_edu\n        },\n        {\n          'name': 'port4',\n          'role': 'lan',\n          'vrf': 12,\n          'ip': lan_ip_fin\n        }\n      ]\n    },\n\n    'Gold': {\n      'interfaces': [\n        {\n          'name': 'port1',\n          'role': 'wan',\n          'ol_type': 'ISP1',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'dia': true\n        },\n        {\n          'name': 'port2',\n          'role': 'wan',\n          'ol_type': 'ISP2',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'dia': true\n        },\n        {\n          'name': 'port3',\n          'role': 'wan',\n          'ol_type': 'MPLS',\n          'ip': mpls_wan_ip,\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth\n        },\n        {\n          'name': 'port4',\n          'role': 'lan',\n          'vrf': 11,\n          'allow_dia': true,\n          'ip': lan_ip_edu\n        },\n        {\n          'name': 'port5',\n          'role': 'lan',\n          'vrf': 12,\n          'ip': lan_ip_fin\n        }\n      ]\n    }\n\n  }\n%}\n\n{# Hubs #}\n{% set hubs = {\n\n    'site1-H1': {\n      'lo_bgp': '10.200.1.253',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.1.1',\n          'network_id': '11'\n        },\n        'ISP2': {\n          'wan_ip': '100.64.1.9',\n          'network_id': '12'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.1.5',\n          'network_id': '13'\n        }\n      }\n    },\n\n    'site1-H2': {\n      'lo_bgp': '10.200.1.254',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.2.1',\n          'network_id': '21'\n        },\n        'ISP2': {\n          'wan_ip': '100.64.2.9',\n          'network_id': '22'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.2.5',\n          'network_id': '23'\n        }\n      }\n    },\n\n    'site2-H1': {\n      'lo_bgp': '10.200.2.253',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.4.1',\n          'network_id': '41'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.4.5',\n          'network_id': '43'\n        }\n      }\n    }\n\n  }\n%}","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_gateway","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after_unknown":{},"before_sensitive":{"variables":[false,false,false,false,false,false]},"after_sensitive":{"variables":[false,false,false,false,false,false,false,false,false,false,false]}}},{"address":"fortimanager_object_cli_templategroup.Edge-Template","mode":"managed","type":"fortimanager_object_cli_templategroup","name":"Edge-Template","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI template group","id":"Edge-Template","member":["01-Edge-Underlay","02-Edge-Overlay","03-Edge-Routing"],"modification_time":"","name":"Edge-Template","scopetype":"adom","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI template group","id":"Edge-Template","member":["01-Edge-Underlay","02-Edge-Overlay","03-Edge-Routing"],"modification_time":"","name":"Edge-Template","scopetype":"adom","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after_unknown":{},"before_sensitive":{"member":[false,false,false],"variables":[false,false,false,false,false,false,false,false,false,false]},"after_sensitive":{"member":[false,false,false],"variables":[false,false,false,false,false,false,false,false,false,false]}}},{"address":"fortimanager_object_cli_templategroup.Hub-Template","mode":"managed","type":"fortimanager_object_cli_templategroup","name":"Hub-Template","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI template group","id":"Hub-Template","member":["01-Hub-Underlay","02-Hub-Overlay","03-Hub-Routing","04-Hub-MultiRegion"],"modification_time":"","name":"Hub-Template","scopetype":"adom","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI template group","id":"Hub-Template","member":["01-Hub-Underlay","02-Hub-Overlay","03-Hub-Routing","04-Hub-MultiRegion"],"modification_time":"","name":"Hub-Template","scopetype":"adom","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"after_unknown":{},"before_sensitive":{"member":[false,false,false,false],"variables":[false,false,false,false,false,false,false,false,false,false]},"after_sensitive":{"member":[false,false,false,false],"variables":[false,false,false,false,false,false,false,false,false,false]}}},{"address":"fortimanager_object_fmg_variable.makeMetadata-hostname","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-hostname","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"authByTerraform"}],"dynamic_sort_subtable":"false","id":"hostname","name":"hostname","scopetype":"adom","value":"FGT"},"after":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"authByTerraform"}],"dynamic_sort_subtable":"false","id":"hostname","name":"hostname","scopetype":"adom","value":"FGT"},"after_unknown":{},"before_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]},"after_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]}}},{"address":"fortimanager_object_fmg_variable.makeMetadata-inbandwidth","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-inbandwidth","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"5"}],"dynamic_sort_subtable":"false","id":"inbandwidth","name":"inbandwidth","scopetype":"adom","value":"5"},"after":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"5"}],"dynamic_sort_subtable":"false","id":"inbandwidth","name":"inbandwidth","scopetype":"adom","value":"5"},"after_unknown":{},"before_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]},"after_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]}}},{"address":"fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-lan_ip_edu","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["update"],"before":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"10.0.0.1/24"}],"dynamic_sort_subtable":"false","id":"lan_ip_edu","name":"lan_ip_edu","scopetype":"adom","value":"10.0.0.1/24"},"after":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"10.0.0.1/20"}],"dynamic_sort_subtable":"false","id":"lan_ip_edu","name":"lan_ip_edu","scopetype":"adom","value":"10.0.0.1/24"},"after_unknown":{},"before_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]},"after_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]}}},{"address":"fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-lan_ip_fin","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"11.0.0.1/24"}],"dynamic_sort_subtable":"false","id":"lan_ip_fin","name":"lan_ip_fin","scopetype":"adom","value":"11.0.0.1/24"},"after":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"11.0.0.1/24"}],"dynamic_sort_subtable":"false","id":"lan_ip_fin","name":"lan_ip_fin","scopetype":"adom","value":"11.0.0.1/24"},"after_unknown":{},"before_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]},"after_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]}}},{"address":"fortimanager_object_fmg_variable.makeMetadata-loopback","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-loopback","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"1.1.1.1/32"}],"dynamic_sort_subtable":"false","id":"loopback","name":"loopback","scopetype":"adom","value":"1.1.1.1/32"},"after":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"1.1.1.1/32"}],"dynamic_sort_subtable":"false","id":"loopback","name":"loopback","scopetype":"adom","value":"1.1.1.1/32"},"after_unknown":{},"before_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]},"after_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]}}},{"address":"fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-mpls_wan_gateway","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"2.2.2.2/32"}],"dynamic_sort_subtable":"false","id":"mpls_wan_gateway","name":"mpls_wan_gateway","scopetype":"adom","value":"2.2.2.2/32"},"after":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"2.2.2.2/32"}],"dynamic_sort_subtable":"false","id":"mpls_wan_gateway","name":"mpls_wan_gateway","scopetype":"adom","value":"2.2.2.2/32"},"after_unknown":{},"before_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]},"after_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]}}},{"address":"fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-mpls_wan_ip","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"12.0.0.1/24"}],"dynamic_sort_subtable":"false","id":"mpls_wan_ip","name":"mpls_wan_ip","scopetype":"adom","value":"12.0.0.1/24"},"after":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"12.0.0.1/24"}],"dynamic_sort_subtable":"false","id":"mpls_wan_ip","name":"mpls_wan_ip","scopetype":"adom","value":"12.0.0.1/24"},"after_unknown":{},"before_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]},"after_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]}}},{"address":"fortimanager_object_fmg_variable.makeMetadata-outbandwidth","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-outbandwidth","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"10"}],"dynamic_sort_subtable":"false","id":"outbandwidth","name":"outbandwidth","scopetype":"adom","value":"10"},"after":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"10"}],"dynamic_sort_subtable":"false","id":"outbandwidth","name":"outbandwidth","scopetype":"adom","value":"10"},"after_unknown":{},"before_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]},"after_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]}}},{"address":"fortimanager_object_fmg_variable.makeMetadata-profile","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-profile","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"Gold"}],"dynamic_sort_subtable":"false","id":"profile","name":"profile","scopetype":"adom","value":"Gold"},"after":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"Gold"}],"dynamic_sort_subtable":"false","id":"profile","name":"profile","scopetype":"adom","value":"Gold"},"after_unknown":{},"before_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]},"after_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]}}},{"address":"fortimanager_object_fmg_variable.makeMetadata-region","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-region","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"Reagion Variable","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"West"}],"dynamic_sort_subtable":"false","id":"region","name":"region","scopetype":"adom","value":"East"},"after":{"adom":"createdByTerraform","description":"Reagion Variable","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"West"}],"dynamic_sort_subtable":"false","id":"region","name":"region","scopetype":"adom","value":"East"},"after_unknown":{},"before_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]},"after_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]}}},{"address":"fortimanager_object_fmg_variable.makeMetadata-shaping_profile","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-shaping_profile","provider_name":"registry.terraform.io/fortinetdev/fortimanager","change":{"actions":["no-op"],"before":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"Silver"}],"dynamic_sort_subtable":"false","id":"shaping_profile","name":"shaping_profile","scopetype":"adom","value":"Silver"},"after":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"Silver"}],"dynamic_sort_subtable":"false","id":"shaping_profile","name":"shaping_profile","scopetype":"adom","value":"Silver"},"after_unknown":{},"before_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]},"after_sensitive":{"dynamic_mapping":[{"_scope":[{}]}]}}}],"prior_state":{"format_version":"1.0","terraform_version":"1.6.2","values":{"root_module":{"resources":[{"address":"fortimanager_dvm_cmd_update_device.refreshDevice","mode":"managed","type":"fortimanager_dvm_cmd_update_device","name":"refreshDevice","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"device":"FortiGate-VM64-KVM","flags":["create_task","nonblocking"],"fmgadom":"createdByTerraform","force_recreate":null,"id":"DvmCmdUpdateDevice"},"sensitive_values":{"flags":[false,false]},"depends_on":["fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_json_generic_api.authDevice"]},{"address":"fortimanager_json_generic_api.authDevice","mode":"managed","type":"fortimanager_json_generic_api","name":"authDevice","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"comment":null,"force_recreate":null,"id":"JSONRPC-Requst-81615269-be2c-45d7-bb98-fceaf80319cb","json_content":"{\n  \"method\": \"exec\",\n  \"params\": [\n    {\n      \"data\": {\n        \"adom\": \"createdByTerraform\",\n        \"device\": {\n          \"device action\": \"promote_unreg\",\n          \"name\": \"FortiGate-VM64-KVM\",\n          \"platform_str\": \"FortiGate-VM64-KVM\",\n          \"sn\": \"FGVMEVDNB1HFA86B\",\n          \"adm_usr\": \"admin\",\n          \"adm_pass\": \"\"\n        },\n        \"flags\": [\n          \"create_task\"\n        ]\n      },\n      \"url\": \"/dvm/cmd/add/device\"\n    }\n  ]\n}\n","response":"{ \"result\": [ { \"data\": { \"device\": { \"adm_usr\": \"admin\", \"av_ver\": \"1.00000(2018-04-09 18:07)\", \"beta\": -1, \"branch_pt\": 1262, \"build\": 1262, \"conf_status\": 2, \"conn_mode\": 1, \"conn_status\": 1, \"dev_status\": 0, \"faz.perm\": 15, \"flags\": 2097537, \"hostname\": \"FortiGate-VM64-KVM\", \"ip\": \"10.1.10.249\", \"ips_ver\": \"6.00741(2015-12-01 02:30)\", \"last_checked\": 1697792034, \"maxvdom\": 2, \"mgmt.__data[0]\": 4132787, \"mgmt.__data[4]\": 2104856576, \"mgmt.__data[6]\": 1, \"mgmt_if\": \"port1\", \"mgmt_mode\": 3, \"mgmt_uuid\": \"716a7346-6f1f-51ee-22fa-ba7a0575dbc9\", \"mr\": 2, \"name\": \"FortiGate-VM64-KVM\", \"oid\": 792, \"opts\": 512, \"os_type\": 0, \"os_ver\": 7, \"patch\": 3, \"platform_id\": 161, \"platform_str\": \"FortiGate-VM64-KVM\", \"sn\": \"FGVMEVDNB1HFA86B\", \"source\": 1, \"tab_status\": \"\u003cunknown\u003e\", \"tunnel_ip\": \"169.254.0.90\", \"vdom\": [ { \"devid\": 792, \"ext_flags\": 1, \"name\": \"root\", \"oid\": 3, \"opmode\": 1, \"status\": \"\u003cunknown\u003e\", \"tab_status\": \"\u003cunknown\u003e\", \"vdom_type\": 1 } ], \"version\": 700, \"vm_cpu\": 1, \"vm_cpu_limit\": 1, \"vm_mem\": 2007, \"vm_mem_limit\": 2048, \"vm_status\": 6 }, \"taskid\": 656 }, \"status\": { \"code\": 0, \"message\": \"OK\" }, \"url\": \"\\/dvm\\/cmd\\/add\\/device\" } ] }"},"sensitive_values":{},"depends_on":["fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM"]},{"address":"fortimanager_json_generic_api.updateDeviceDB","mode":"managed","type":"fortimanager_json_generic_api","name":"updateDeviceDB","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"comment":null,"force_recreate":null,"id":"JSONRPC-Requst-16aab421-780d-478a-8a85-a1358dc650b2","json_content":"{\n  \"method\": \"update\",\n  \"params\": [\n    {\n      \"data\": {\n        \"adm_pass\": \"\",\n        \"adm_usr\": \"admin\",\n        \"desc\": \"This is updated from Terrafrom using an API!\",\n        \"latitude\": 60.37309404359674,\n        \"longitude\": 5.33920881412722,\n        \"meta fields\": {\n          \"Address\": \"Fj√∏sangerveien 65\",\n          \"Company/Organization\": \"Eviny Digital AS\",\n          \"Contact Email\": \"ghaith.almujalled@verja.no\",\n          \"Contact Phone Number\": \"+4745402619\"\n        },\n        \"name\": \"authByTerraform\"\n      },\n      \"url\": \"/dvmdb/adom/createdByTerraform/device/FortiGate-VM64-KVM\"\n    }\n  ]\n}\n","response":"{ \"result\": [ { \"data\": { \"name\": \"authByTerraform\" }, \"status\": { \"code\": 0, \"message\": \"OK\" }, \"url\": \"\\/dvmdb\\/adom\\/createdByTerraform\\/device\\/FortiGate-VM64-KVM\" } ] }"},"sensitive_values":{},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM"]},{"address":"fortimanager_object_cli_template.Edge-Overlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Edge-Overlay","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"02-Edge-Overlay","modification_time":"","name":"02-Edge-Overlay","provision":"","scopetype":"adom","script":"{# 02-Edge-Overlay.j2                                                         #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n\n{% for h in project.regions[region].hubs %}\n{% set hubloop = loop %}\n{% set ol_tunnels = [] %}\n{% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\n  {# Track generated tunnels, to handle duplicates by adding extra index as a suffix #}\n  {% set ul_name = i.ul_name~\"-\" if i.ul_name is defined else \"\" %}\n  {% set ol_tun = ul_name~\"H\"~hubloop.index~\"_\"~i.ol_type %}\n  {% set count = ol_tunnels|select(\"equalto\", ol_tun)|list|count %}\n  {# Tunnel name = 'H\u003chub_number\u003e_\u003col_type\u003e' if no duplicates, otherwise 'H\u003chub_number\u003e_\u003col_type\u003e_\u003cindex\u003e' #}\n  {% set ol_tun_name = ol_tun if not count else ol_tun~'_'~(count+1) %}\n  {{ ol_tunnels.append(ol_tun) or \"\" }}\nconfig vpn ipsec phase1-interface\n  edit \"{{ ol_tun_name }}\"\n    set interface \"{{ i.name }}\"\n    set ike-version 2\n    {% if project.cert_auth|default(true) %}\n    set authmethod signature\n    set certificate \"{{ project.edge_cert_template|default('Edge') }}\"\n    {% else %}\n    set psksecret {{ project.psk|default('S3cr3t!') }}\n    {% endif %}\n    set keylife 28800\n    set peertype any\n    set net-device enable\n    set proposal aes256gcm-prfsha256 aes256-sha256\n    set idle-timeout enable\n    {% if project.intrareg_advpn|default(true) %}\n    set auto-discovery-receiver enable\n    set add-route disable\n    {% else %}\n    set auto-discovery-receiver disable    \n    set exchange-interface-ip enable\n    {% endif %}    \n    set encapsulation vpn-id-ipip\n    set exchange-ip-addr4 {{ loopback|ipaddr('address') }}\n    set network-overlay enable\n    set network-id {{ project.hubs[h].overlays[i.ol_type].network_id }}\n    set remote-gw {{ project.hubs[h].overlays[i.ol_type].wan_ip }}\n    set dpd-retrycount 3\n    set dpd-retryinterval 5\n    set dpd on-idle\n  next\nend\nconfig vpn ipsec phase2-interface\n  edit \"{{ ol_tun_name }}\"\n    set phase1name \"{{ ol_tun_name }}\"\n    set proposal aes256gcm\n    set keepalive enable\n    set keylifeseconds 3600\n  next\nend\nconfig system interface\n  edit \"{{ ol_tun_name }}\"\n    set vrf {{ pe_vrf }}\n  next\nend\n{% endfor %}\n{% endfor %}\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_cli_template.Edge-Underlay","fortimanager_object_cli_template.Hub-Underlay","fortimanager_object_cli_template.Project","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-inbandwidth","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-outbandwidth","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region","fortimanager_object_fmg_variable.makeMetadata-shaping_profile"]},{"address":"fortimanager_object_cli_template.Edge-Routing","mode":"managed","type":"fortimanager_object_cli_template","name":"Edge-Routing","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"03-Edge-Routing","modification_time":"","name":"03-Edge-Routing","provision":"","scopetype":"adom","script":"{# 03-Edge-Routing.j2                                                         #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_rt_as = project.vrf_rt_as|default('65000') %}\n\nconfig router route-map\n  {% for i in range(1,3) %}\n  edit \"H{{loop.index}}_TAG\"\n    config rule\n      edit 1\n        set set-tag {{ loop.index }}\n      next\n    end\n  next\n  {% endfor %}\n  edit \"SLA_OK\"\n    config rule\n      edit 1\n        set set-community \"{{ project.regions[region].as }}:99\"\n      next\n    end\n  next\nend\n\nconfig router bgp\n  set as {{ project.regions[region].as }}\n  set router-id {{ loopback|ipaddr('address') }}\n  set keepalive-timer 15\n  set holdtime-timer 45\n  set ibgp-multipath enable\n  set recursive-next-hop enable\n  set tag-resolve-mode merge\n  config neighbor\n    {% for h in project.regions[region].hubs %}\n    edit {{ project.hubs[h].lo_bgp }}\n      set soft-reconfiguration enable\n      set soft-reconfiguration-vpnv4 enable\n      set advertisement-interval 1\n      set interface \"Lo\"\n      set update-source \"Lo\"\n      set connect-timer 1\n      set remote-as {{ project.regions[region].as }}\n      set route-map-in \"H{{loop.index}}_TAG\"\n      set route-map-in-vpnv4 \"H{{loop.index}}_TAG\"\n      set route-map-out-vpnv4-preferable \"SLA_OK\"\n    next\n    {% endfor %}\n  end\n  config network\n    {% set network_to_advertise = [] %}\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined and i.advertise|default(true) %}\n      {% if not i.ip in network_to_advertise %}\n        {{ network_to_advertise.append(i.ip) or \"\" }}\n      {% endif %}\n    {% endfor %}\n\n    {% for i in network_to_advertise if i|length %}\n      edit {{ loop.index }}\n        set prefix {{ i|ipaddr(0) }}\n      next\n    {% endfor %}\n    end\n  config vrf\n    edit \"{{ pe_vrf }}\"\n      set role pe\n    next\n    {% for i in project.profiles[profile].interfaces if i.vrf is defined and i.name is defined %}\n    edit \"{{ i.vrf }}\"\n      set role \"ce\"\n      set rd \"{{ vrf_rt_as }}:{{ i.vrf }}\"\n      set import-rt \"{{ vrf_rt_as }}:{{ i.vrf }}\"\n      set export-rt \"{{ vrf_rt_as }}:{{ i.vrf }}\"\n    next\n    {% endfor %}\n  end\nend\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_cli_template.Edge-Overlay","fortimanager_object_cli_template.Edge-Underlay","fortimanager_object_cli_template.Hub-Overlay","fortimanager_object_cli_template.Hub-Underlay","fortimanager_object_cli_template.Project","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-inbandwidth","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-outbandwidth","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region","fortimanager_object_fmg_variable.makeMetadata-shaping_profile"]},{"address":"fortimanager_object_cli_template.Edge-Underlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Edge-Underlay","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"01-Edge-Underlay","modification_time":"","name":"01-Edge-Underlay","provision":"","scopetype":"adom","script":"{# 01-Edge-Underlay.j2                                                        #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_leak_summary = project.vrf_leak_summary|default('10.200.255.0/24') %}\n\n{# General settings #}\nconfig system settings\n  set location-id {{ loopback|ipaddr('address') }}\n  set allow-subnet-overlap enable\nend\nconfig system global\n  {% if not project.profiles[profile].ha|default(false) and hostname is defined %}\n  set hostname {{ hostname }}\n  {% endif %}\nend\n\n{# Loop: Configure underlay interfaces #}\n{% for i in project.profiles[profile].interfaces if i.name is defined %}\nconfig system interface\n  edit \"{{i.name}}\"\n    {# IP #}\n    {% if i.ip is defined %}\n    {% if i.ip == 'dhcp' %}\n    set mode dhcp\n    {%  else %}\n    set mode static\n    set ip {{ i.ip }}\n    {% endif %}\n    {% endif %}\n\n    {# VRF #}\n    {% if i.vrf is defined %}\n    set vrf {{ i.vrf }}\n    {% else %}\n    set vrf {{ pe_vrf }}\n    {% endif %}\n\n    {# VLAN #}\n    {% if i.vlanid is defined and i.parent is defined %}\n    set vdom \"root\"\n    set type vlan\n    set vlanid {{ i.vlanid }}\n    set interface {{ i.parent }}\n    {% endif %}\n\n    {# FEX #}\n    {% if i.fex|default(false) %}\n    set type fext-wan\n    {% endif %}       \n\n    {# QoS: Add shaping profile and in/outbandwidth only if interface is of type wan and meta fields are both defined #}\n    {% if i.role == 'wan' and i.outbandwidth is defined %}\n    set estimated-upstream-bandwidth {{ i.outbandwidth }}\n      {% if i.shaping_profile is defined %}\n      set outbandwidth {{ i.outbandwidth }}\n      set egress-shaping-profile {{ i.shaping_profile }}\n      {% endif %}\n    {% endif %}\n    {% if i.role == 'wan' and i.inbandwidth is defined %}\n    set estimated-downstream-bandwidth {{ i.inbandwidth }}\n      {% if i.shaping_profile is defined %}\n      set inbandwidth {{ i.inbandwidth }}\n      set ingress-shaping-profile {{ i.shaping_profile }}\n      {% endif %}\n    {% endif %}\n\n    {# Other settings #}\n    {% if i.role == 'wan' %}\n    set role wan\n    {% endif %}\n    {% if i.role == 'lan' %}\n    set role lan\n    set device-identification enable\n    {% endif %}\n    set allowaccess {{ 'ping' if not i.access|default(false) else i.access }}\n  next\nend\n\n{# Configure FEX parent interface #}\n{% if i.fex|default(false) %}\nconfig system interface\n  edit {{ i.parent }}\n    set mode dhcp\n    set allowaccess ping fabric\n    set monitor-bandwidth enable\n    set role wan\n    unset lldp-reception      \n  next\nend\n{% endif %}\n\n{# VRF Leak #}\n{% if i.vrf is defined and i.allow_dia|default(false) %}\n  {# Configure software vdom-link interface if model is VM #}\n  {% if i.leak_npu_link|default('') == '' %}\n  config system vdom-link\n    edit \"vrf{{ i.vrf }}_leak\"\n    next\n  end\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vdom-link\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vdom-link\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {# Configure vlan interfaces on top of npu link if model is HW #}\n  {% else %}\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}0\"\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}1\"\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {% endif %}\n\n  {# Add default route to pe_vrf for each vrf #}\n  config router static\n    edit {{ 10000 + i.vrf }}\n      set gateway {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}\n      set device vrf{{ i.vrf }}_leak1\n    next\n  end\n\n  {# Configure a zone for easier policy management of vrf leaking #}\n  {% if project.create_vrf_leak_zone|default(true) and i.role == 'lan' %}\n  config system zone\n    edit \"{{ project.pevrf_leak_zone|default('pevrf_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak0\"\n    next\n    edit \"{{ project.vrf_leak_zone|default('vrfs_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak1\"\n    next\n  end\n  {% endif %}\n{% endif %}\n\n{# End Loop: Configure underlay interfaces #}\n{% endfor %}\n\n{# Main Loopback #}\nconfig system interface\n  edit \"Lo\"\n    set vdom \"root\"\n    set type loopback\n    set vrf {{ pe_vrf }}\n    set ip {{ loopback|ipaddr('address') }}/32\n    set allowaccess ping\n  next\nend\n\n{# Create LAN Zone #}\n{% set lan_intf = [] %}\n{% if project.create_lan_zone|default(true) %}\nconfig system zone\n  edit \"{{ project.lan_zone|default('lan_zone') }}\"\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n    {{  lan_intf.append(i.name) or \"\" }}\n    {% endfor %}\n    set interface {{ lan_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Support SD-Branch (Fortilink interface) #}\n{% set fortilink_intf = [] %}\n{% for i in project.profiles[profile].interfaces if i.role == 'sd_branch' and i.name is defined %}\n{{  fortilink_intf.append(i.name) or \"\" }}\n{% endfor %}\n{% if fortilink_intf %}\nconfig system global\n  set switch-controller enable\nend\nconfig system interface\n  edit \"fortilink\"\n    set member {{ fortilink_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Enable DHCP Server on LAN interfaces #}\n{% if project.create_lan_dhcp_server|default(true) %}\nconfig system dhcp server\n  {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n  {% if i.dhcp_server|default(true) %}\n  edit {{ 10 + loop.index0 }}\n    set dns-service default\n    set default-gateway {{ i.ip|ipaddr('address') }}\n    set netmask {{ i.ip|ipaddr('netmask') }}\n    set interface {{ i.name }}\n    config ip-range\n      edit 1\n        set start-ip {{ i.ip|ipaddr(4)|ipaddr('address') }}\n        set end-ip {{ i.ip|ipaddr(-5)|ipaddr('address') }}\n      next\n    end\n  next\n  {% endif %}\n  {% endfor %}\nend\n{% endif %}\n","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false,false]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_cli_template.Project","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-inbandwidth","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-outbandwidth","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region","fortimanager_object_fmg_variable.makeMetadata-shaping_profile"]},{"address":"fortimanager_object_cli_template.Hub-MultiRegion","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-MultiRegion","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"04-Hub-MultiRegion","modification_time":"","name":"04-Hub-MultiRegion","provision":"","scopetype":"adom","script":"{# 04-Hub-MultiRegion.j2                                                      #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set hub2hub_ol = [] %}\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n\n{% if project.regions|count \u003e 1  %}\n\n{% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\n  {% for r in project.regions if r != region %}\n    {% for h in project.regions[r].hubs %}\n      {% if i.ol_type in project.hubs[h].overlays %}\n      config vpn ipsec phase1-interface\n        edit \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set interface \"{{ i.name }}\"\n          set ike-version 2\n          {% if project.cert_auth|default(true) %}\n          set authmethod signature\n          set certificate \"{{ project.edge_cert_template|default('Hub') }}\"\n          {% else %}\n          set psksecret {{ project.psk|default('S3cr3t!') }}\n          {% endif %}\n          set keylife 28800\n          set peertype any\n          set proposal aes256gcm-prfsha256\n          {% if project.multireg_advpn|default(false) %}\n          set auto-discovery-sender enable\n          set auto-discovery-receiver enable\n          set auto-discovery-forwarder enable\n          set add-route disable\n          {% else %}\n          set exchange-interface-ip enable\n          {% endif %}\n          set remote-gw {{ project.hubs[h].overlays[i.ol_type].wan_ip }}\n          set encapsulation vpn-id-ipip\n          set exchange-ip-addr4 {{ loopback|ipaddr('address') }}\n          set dpd-retrycount 3\n          set dpd-retryinterval 5\n          set dpd on-idle\n        next\n      end\n      config vpn ipsec phase2-interface\n        edit \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set phase1name \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set proposal aes256gcm\n          set keepalive enable\n          set keylifeseconds 3600\n        next\n      end\n      config system interface\n        edit \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set vrf {{ pe_vrf }}\n        next\n      end\n      {% if project.overlay_stickiness|default(true) %}\n      config router policy\n        edit {{ hub2hub_ol|length * 2 + 11 }}\n          set input-device \"EDGE_{{ i.ol_type }}\"\n          set output-device \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set dst {{ project.lan_summary }}\n        next\n        edit {{ hub2hub_ol|length * 2 + 12 }}\n          set input-device \"{{ r|upper }}_H{{ loop.index}}_{{ i.ol_type }}\"\n          set output-device \"EDGE_{{ i.ol_type }}\"\n          set dst {{ project.lan_summary }}\n        next\n      end\n      {% endif %}\n      {{ hub2hub_ol.append(r|upper~'_H'~loop.index~'_'~i.ol_type) or \"\" }}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n{% endfor %}\n\n{% if project.create_hub2hub_zone|default(true) %}\nconfig system zone\n  edit \"{{project.hub2hub_zone|default('hub2hub_overlay')}}\"\n    append interface {{ hub2hub_ol|join(' ') }}\n  next\nend\n{% endif %}\n\n{% if project.multireg_advpn|default(false) %}\n{# Advertise loopback summaries between the regions #}\nconfig router access-list\n  {# Regional loopback summary #}\n  edit \"LO_REGIONAL_SUMMARY\"\n    config rule\n      edit 1\n        set prefix {{ project.regions[region].lo_summary }}\n        set exact-match enable\n      next\n    end\n  next\nend\nconfig router route-map\n  edit \"HUB2HUB_OUT\"\n    config rule\n      edit 1\n        {# Do not readvertise regional loopback summary to remote Edges and other regions #}\n        set match-ip-address \"LO_REGIONAL_SUMMARY\"\n        set set-community no-advertise\n      next\n      edit 100\n      next\n    end\n  next\n  edit \"EDGE_OUT\"\n    config rule\n      edit 1\n        {# Do not advertise regional loopback summary to Edges (they already receive global summary) #}\n        set match-ip-address \"LO_REGIONAL_SUMMARY\"\n        set action deny\n      next\n      edit 100\n      next\n    end\n  next\nend\nconfig router bgp\n  config neighbor-group\n    edit \"EDGE\"\n      set route-map-out EDGE_OUT\n      {# Preserve next-hop of prefixes coming from remote regions #}\n      set attribute-unchanged-vpnv4 next-hop\n    next\n  end\n  config network\n    edit 103\n      set prefix {{ project.regions[region].lo_summary }}\n    next\n  end\nend\nconfig router static\n  edit 103\n    set dst {{ project.regions[region].lo_summary }}\n    set blackhole enable\n    set vrf \"{{ pe_vrf }}\"\n    set comment \"Regional loopback summary\"\n  next\nend\n{% else %}\n{# Advertise regional LAN summaries between the regions #}\nconfig router static\n  {% for v in project.regions[region].vrfs %}\n  edit {{ 110 + v.id }}\n    set dst {{ v.lan_summary }}\n    set blackhole enable\n    set vrf \"{{ v.id }}\"\n    set comment \"Regional LAN summary (VRF={{ v.id }})\"\n  next\n  {% endfor %}\nend\nconfig router access-list\n  edit \"LAN_REGIONAL_SUMMARY\"\n    config rule\n      {% for v in project.regions[region].vrfs %}\n      edit {{ v.id }}\n        set prefix {{ v.lan_summary }}\n        set exact-match enable\n      next\n      {% endfor %}\n    end\n  next\nend\nconfig router route-map\n  edit \"HUB2HUB_OUT\"\n    config rule\n      edit 1\n        set match-ip-address \"LAN_REGIONAL_SUMMARY\"\n        unset set-community\n      next\n      edit 1000\n        set action deny\n      next\n    end\n  next\nend\nconfig router bgp\n  config redistribute \"static\"\n    set status enable\n    set route-map \"HUB2HUB_OUT\"\n  end\nend\n{% endif %}\n\nconfig router bgp\n  config neighbor\n    {% for r in project.regions if r != region %}\n    {% for h in project.regions[r].hubs %}\n    edit {{ project.hubs[h].lo_bgp }}\n      set ebgp-enforce-multihop enable\n      set soft-reconfiguration enable\n      set advertisement-interval 1\n      set link-down-failover enable\n      set interface \"Lo\"\n      set update-source \"Lo\"\n      {% if project.multireg_advpn|default(false) %}\n      set attribute-unchanged-vpnv4 next-hop\n      set route-map-out \"HUB2HUB_OUT\"\n      {% else %}\n      set route-map-out-vpnv4 \"HUB2HUB_OUT\"\n      {% endif %}\n      set connect-timer 1\n      set remote-as {{ project.regions[r].as }}\n    next\n    {% endfor %}\n    {% endfor %}\n  end\nend\n\n{% endif %}\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_cli_template.Edge-Overlay","fortimanager_object_cli_template.Edge-Routing","fortimanager_object_cli_template.Edge-Underlay","fortimanager_object_cli_template.Hub-Overlay","fortimanager_object_cli_template.Hub-Routing","fortimanager_object_cli_template.Hub-Underlay","fortimanager_object_cli_template.Project","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-inbandwidth","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-outbandwidth","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region","fortimanager_object_fmg_variable.makeMetadata-shaping_profile"]},{"address":"fortimanager_object_cli_template.Hub-Overlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-Overlay","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"02-Hub-Overlay","modification_time":"","name":"02-Hub-Overlay","provision":"","scopetype":"adom","script":"{# 02-Hub-Overlay.j2                                                          #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n\n{% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\nconfig vpn ipsec phase1-interface\n  edit \"EDGE_{{ i.ol_type }}\"\n    set type dynamic\n    set interface \"{{ i.name }}\"\n    set ike-version 2\n    {% if project.cert_auth|default(true) %}\n    set authmethod signature\n    set certificate \"{{ project.edge_cert_template|default('Hub') }}\"\n    {% else %}\n    set psksecret {{ project.psk|default('S3cr3t!') }}\n    {% endif %}\n    set peertype any\n    set proposal aes256gcm-prfsha256 aes256-sha256\n    {% if project.intrareg_advpn|default(true) %}\n    set auto-discovery-sender enable\n    {% else %}\n    set auto-discovery-sender disable\n    set exchange-interface-ip enable\n    {% endif %}    \n    set encapsulation vpn-id-ipip\n    set exchange-ip-addr4 {{ loopback|ipaddr('address') }}\n    set add-route disable\n    set network-overlay enable\n    set network-id {{ project.hubs[hostname].overlays[i.ol_type].network_id }}\n    set dpd-retrycount 2\n    set dpd-retryinterval 5\n    set dpd on-idle\n  next\nend\nconfig vpn ipsec phase2-interface\n  edit \"EDGE_{{ i.ol_type }}\"\n    set phase1name \"EDGE_{{ i.ol_type }}\"\n    set proposal aes256gcm\n    set keepalive enable\n  next\nend\nconfig system interface\n  edit \"EDGE_{{ i.ol_type }}\"\n    set vrf {{ pe_vrf }}\n  next\nend\n{% endfor %}\n","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false,false]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_cli_template.Edge-Overlay","fortimanager_object_cli_template.Edge-Underlay","fortimanager_object_cli_template.Hub-Underlay","fortimanager_object_cli_template.Project","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-inbandwidth","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-outbandwidth","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region","fortimanager_object_fmg_variable.makeMetadata-shaping_profile"]},{"address":"fortimanager_object_cli_template.Hub-Routing","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-Routing","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"03-Hub-Routing","modification_time":"","name":"03-Hub-Routing","provision":"","scopetype":"adom","script":"{# 03-Hub-Routing.j2                                                          #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_rt_as = project.vrf_rt_as|default('65000') %}\n\nconfig router community-list\n  edit \"SLA_OK\"\n    config rule\n      edit 1\n        set action permit\n        set match \"{{ project.regions[region].as }}:99\"\n      next\n    end\n  next\nend\nconfig router route-map\n  edit \"LOCAL_REGION\"\n    config rule\n      edit 1\n        {# Do not advertise to EBGP peers (outside the region #}\n        set set-community \"no-export\"\n      next\n    end\n  next\nend\nconfig router bgp\n  set as {{ project.regions[region].as }}\n  set router-id {{ loopback|ipaddr('address') }}\n  set keepalive-timer 15\n  set holdtime-timer 45\n  set ibgp-multipath enable\n  set ebgp-multipath enable\n  set recursive-next-hop enable\n  set recursive-inherit-priority enable\n  config neighbor-group\n    edit \"EDGE\"\n      set soft-reconfiguration-vpnv4 enable\n      set advertisement-interval 1\n      set next-hop-self enable\n      set remote-as {{ project.regions[region].as }}\n      set interface \"Lo\"\n      set update-source \"Lo\"\n      {% if project.intrareg_advpn|default(true) %}\n      set route-reflector-client-vpnv4 enable\n      {% else %}\n      set route-reflector-client-vpnv4 disable\n      {% endif %}      \n    next\n  end\n  config neighbor-range\n    edit 1\n      set prefix {{ project.lo_summary }}\n      set neighbor-group \"EDGE\"\n    next\n  end\n  config network\n    edit 1\n      set prefix {{ project.lo_summary }}\n      set route-map \"LOCAL_REGION\"\n    next\n    {% set network_to_advertise = [] %}\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined and i.advertise|default(true) %}\n      {% if not i.ip in network_to_advertise %}\n        {{ network_to_advertise.append(i.ip) or \"\" }}\n      {% endif %}\n    {% endfor %}\n\n    {% for i in network_to_advertise if i|length %}\n      edit {{ loop.index + 1 }}\n        set prefix {{ i|ipaddr(0) }}\n      next\n    {% endfor %}\n    end\n  config vrf\n    edit \"{{ pe_vrf }}\"\n      set role pe\n    next\n    {% for v in project.regions[region].vrfs %}\n    edit \"{{ v.id }}\"\n      set role \"ce\"\n      set rd \"{{ vrf_rt_as }}:{{ v.id }}\"\n      set import-rt \"{{ vrf_rt_as }}:{{ v.id }}\"\n      set export-rt \"{{ vrf_rt_as }}:{{ v.id }}\"\n    next\n    {% endfor %}\n  end\nend\n\n{% if project.overlay_stickiness|default(true) %}\nconfig router policy\n  {% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}\n  edit {{ loop.index }}\n    set input-device \"EDGE_{{ i.ol_type }}\"\n    set output-device \"EDGE_{{ i.ol_type }}\"\n    set dst {{ project.lan_summary }}\n  next\n  {% endfor %}\nend\n{% endif %}\n\nconfig router static\n  edit 101\n    set dst {{ project.lan_summary }}\n    set blackhole enable\n    set vrf \"{{ pe_vrf }}\"\n    set comment \"Avoid potential leak of corporate traffic to underlay\"\n  next\n  edit 102\n    set dst {{ project.lo_summary }}\n    set blackhole enable\n    set vrf \"{{ pe_vrf }}\"\n  next\nend\n","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_cli_template.Edge-Overlay","fortimanager_object_cli_template.Edge-Routing","fortimanager_object_cli_template.Edge-Underlay","fortimanager_object_cli_template.Hub-Overlay","fortimanager_object_cli_template.Hub-Underlay","fortimanager_object_cli_template.Project","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-inbandwidth","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-outbandwidth","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region","fortimanager_object_fmg_variable.makeMetadata-shaping_profile"]},{"address":"fortimanager_object_cli_template.Hub-Underlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-Underlay","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI Template","id":"01-Hub-Underlay","modification_time":"","name":"01-Hub-Underlay","provision":"","scopetype":"adom","script":"{# 01-Hub-Underlay.j2                                                         #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_leak_summary = project.vrf_leak_summary|default('10.200.255.0/24') %}\n\n{# General settings #}\nconfig system settings\n  set location-id {{ loopback|ipaddr('address') }}\n  set tcp-session-without-syn enable  \n  set allow-subnet-overlap enable\nend\nconfig system global\n  {% if not project.profiles[profile].ha|default(false) and hostname is defined %}\n  set hostname {{ hostname }}\n  {% endif %}\nend\n\n{# Loop: Configure underlay interfaces #}\n{% for i in project.profiles[profile].interfaces if i.name is defined %}\nconfig system interface\n  edit \"{{i.name}}\"\n    {# IP #}\n    {% if i.ip is defined %}\n    {% if i.ip == 'dhcp' %}\n    set mode dhcp\n    {%  else %}\n    set mode static\n    set ip {{ i.ip }}\n    {% endif %}\n    {% endif %}\n\n    {# VRF #}\n    {% if i.vrf is defined %}\n    set vrf {{ i.vrf }}\n    {% else %}\n    set vrf {{ pe_vrf }}\n    {% endif %}\n\n    {# VLAN #}\n    {% if i.vlanid is defined and i.parent is defined %}\n    set vdom \"root\"\n    set type vlan\n    set vlanid {{ i.vlanid }}\n    set interface {{ i.parent }}\n    {% endif %}\n\n    {# Other settings #}\n    {% if i.role == 'wan' %}\n    set role wan\n    {% endif %}\n    {% if i.role == 'lan' %}\n    set role lan\n    set device-identification enable\n    {% endif %}\n    set allowaccess {{ 'ping' if not i.access|default(false) else i.access }}\n  next\nend\n\n{# VRF Leak #}\n{% if i.vrf is defined and i.allow_dia|default(false) %}\n  {# Configure software vdom-link interface if model is VM #}\n  {% if i.leak_npu_link|default('') == '' %}\n  config system vdom-link\n    edit \"vrf{{ i.vrf }}_leak\"\n    next\n  end\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vdom-link\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vdom-link\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {# Configure vlan interfaces on top of npu link if model is HW #}\n  {% else %}\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}0\"\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}1\"\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {% endif %}\n  {# Add a default route to pe_vrf for each vrf #}\n  config router static\n    edit {{ 10000 + i.vrf }}\n      set gateway {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}    \n      set device vrf{{ i.vrf }}_leak1\n    next\n  end\n\n  {# Configure a zone for easier policy management of vrf leaking #}\n  {% if project.create_vrf_leak_zone|default(true) and i.role == 'lan' %}\n  config system zone\n    edit \"{{ project.pevrf_leak_zone|default('pevrf_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak0\"\n    next\n    edit \"{{ project.vrf_leak_zone|default('vrfs_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak1\"\n    next\n  end\n  {% endif %}\n{% endif %}\n\n{# End Loop: Configure underlay interfaces #}\n{% endfor %}\n\n{# Loopback for incoming health-check probes #}\nconfig system interface\n  edit \"Lo-HC\"\n    set vdom \"root\"\n    set type loopback\n    set vrf {{ pe_vrf }}\n    set ip {{ project.hub_hc_server|default('10.200.99.1') }}/32\n    set allowaccess ping\n  next\n  {# Main Loopback #}\n  edit \"Lo\"\n    set vdom \"root\"\n    set type loopback\n    set vrf {{ pe_vrf }}\n    set ip {{ loopback|ipaddr('address') }}/32\n    set allowaccess ping\n  next\nend\n\n{# Create LAN Zone #}\n{% set lan_intf = [] %}\n{% if project.create_lan_zone|default(true) %}\nconfig system zone\n  edit \"{{ project.lan_zone|default('lan_zone') }}\"\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n    {{  lan_intf.append(i.name) or \"\" }}\n    {% endfor %}\n    set interface {{ lan_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Enable DHCP Server on LAN interfaces #}\n{% if project.create_lan_dhcp_server|default(true) %}\nconfig system dhcp server\n  {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n  {% if i.dhcp_server|default(true) %}\n  edit {{ 10 + loop.index0 }}\n    set dns-service default\n    set default-gateway {{ i.ip|ipaddr('address') }}\n    set netmask {{ i.ip|ipaddr('netmask') }}\n    set interface {{ i.name }}\n    config ip-range\n      edit 1\n        set start-ip {{ i.ip|ipaddr(4)|ipaddr('address') }}\n        set end-ip {{ i.ip|ipaddr(-5)|ipaddr('address') }}\n      next\n    end\n  next\n  {% endif %}\n  {% endfor %}\nend\n{% endif %}\n","type":"jinja","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false,false,false,false,false]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_cli_template.Edge-Underlay","fortimanager_object_cli_template.Project","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-inbandwidth","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-outbandwidth","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region","fortimanager_object_fmg_variable.makeMetadata-shaping_profile"]},{"address":"fortimanager_object_cli_template.Project","mode":"managed","type":"fortimanager_object_cli_template","name":"Project","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a project","id":"Project","modification_time":"","name":"Project","provision":"","scopetype":"adom","script":"{#                            Project Template                                #}\n{# -------------------------------------------------------------------------- #}\n{# This file describes the project: its Regions, Hubs and Device Profiles     #}\n{# Normally, this is the only file that needs to be edited between            #}\n{# different projects                                                         #}\n{# -------------------------------------------------------------------------- #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# Please contact your Fortinet representatives for more details              #}\n\n{#\n  Per-device variables used:\n  - Required:\n    - hostname\n    - loopback\n    - profile\n    - region\n    - lan_ip_edu\n    - lan_ip_fin\n    - mpls_wan_ip (whenever the profile includes MPLS link)\n    - mpls_wan_gateway (whenever the profile includes MPLS link)\n  - Optional:\n    - outbandwidth\n    - inbandwidth\n    - shaping_profile\n#}\n\n{# Optional Settings #}\n{% set multireg_advpn = true %}\n{% set cert_auth = false %}\n\n{#  Mandatory Global Definitions #}\n{% set lo_summary = '10.200.0.0/14' %}\n{% set lan_summary = '10.0.0.0/8' %}\n\n{# Regions #}\n{% set regions = {\n    'West': {\n      'as': '65001',\n      'lo_summary': '10.200.1.0/24',\n      'hubs': [ 'site1-H1', 'site1-H2' ],\n      'vrfs': [\n        {\n          'id': 11,\n          'lan_summary': '10.0.0.0/14'\n        },\n        {\n          'id': 12,\n          'lan_summary': '10.0.0.0/14'\n        }\n      ]\n    },\n    'East': {\n      'as': '65002',\n      'lo_summary': '10.200.2.0/24',\n      'hubs': [ 'site2-H1' ],\n      'vrfs': [\n        {\n          'id': 11,\n          'lan_summary': '10.4.0.0/14'\n        },\n        {\n          'id': 12,\n          'lan_summary': '10.4.0.0/14'\n        }\n      ]\n    }\n  }\n%}\n\n{# Device Profiles #}\n{% set profiles = {\n\n    'Silver': {\n      'interfaces': [\n        {\n          'name': 'port1',\n          'role': 'wan',\n          'ol_type': 'ISP1',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'shaping_profile': shaping_profile,\n          'dia': true\n        },\n        {\n          'name': 'port2',\n          'role': 'wan',\n          'ol_type': 'MPLS',\n          'ip': mpls_wan_ip,\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'shaping_profile': shaping_profile\n        },\n        {\n          'name': 'port3',\n          'role': 'lan',\n          'vrf': 11,\n          'allow_dia': true,\n          'ip': lan_ip_edu\n        },\n        {\n          'name': 'port4',\n          'role': 'lan',\n          'vrf': 12,\n          'ip': lan_ip_fin\n        }\n      ]\n    },\n\n    'Gold': {\n      'interfaces': [\n        {\n          'name': 'port1',\n          'role': 'wan',\n          'ol_type': 'ISP1',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'dia': true\n        },\n        {\n          'name': 'port2',\n          'role': 'wan',\n          'ol_type': 'ISP2',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'dia': true\n        },\n        {\n          'name': 'port3',\n          'role': 'wan',\n          'ol_type': 'MPLS',\n          'ip': mpls_wan_ip,\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth\n        },\n        {\n          'name': 'port4',\n          'role': 'lan',\n          'vrf': 11,\n          'allow_dia': true,\n          'ip': lan_ip_edu\n        },\n        {\n          'name': 'port5',\n          'role': 'lan',\n          'vrf': 12,\n          'ip': lan_ip_fin\n        }\n      ]\n    }\n\n  }\n%}\n\n{# Hubs #}\n{% set hubs = {\n\n    'site1-H1': {\n      'lo_bgp': '10.200.1.253',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.1.1',\n          'network_id': '11'\n        },\n        'ISP2': {\n          'wan_ip': '100.64.1.9',\n          'network_id': '12'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.1.5',\n          'network_id': '13'\n        }\n      }\n    },\n\n    'site1-H2': {\n      'lo_bgp': '10.200.1.254',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.2.1',\n          'network_id': '21'\n        },\n        'ISP2': {\n          'wan_ip': '100.64.2.9',\n          'network_id': '22'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.2.5',\n          'network_id': '23'\n        }\n      }\n    },\n\n    'site2-H1': {\n      'lo_bgp': '10.200.2.253',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.4.1',\n          'network_id': '41'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.4.5',\n          'network_id': '43'\n        }\n      }\n    }\n\n  }\n%}","type":"jinja","variables":["inbandwidth","lan_ip_edu","lan_ip_fin","mpls_wan_ip","outbandwidth","shaping_profile"]},"sensitive_values":{"variables":[false,false,false,false,false,false]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvm_cmd_update_device.refreshDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_json_generic_api.authDevice","fortimanager_json_generic_api.updateDeviceDB","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-inbandwidth","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-outbandwidth","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region","fortimanager_object_fmg_variable.makeMetadata-shaping_profile"]},{"address":"fortimanager_object_cli_templategroup.Edge-Template","mode":"managed","type":"fortimanager_object_cli_templategroup","name":"Edge-Template","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI template group","id":"Edge-Template","member":["01-Edge-Underlay","02-Edge-Overlay","03-Edge-Routing"],"modification_time":"","name":"Edge-Template","scopetype":"adom","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"member":[false,false,false],"variables":[false,false,false,false,false,false,false,false,false,false]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_cli_template.Edge-Overlay","fortimanager_object_cli_template.Edge-Routing","fortimanager_object_cli_template.Edge-Underlay","fortimanager_object_cli_template.Hub-Overlay","fortimanager_object_cli_template.Hub-Underlay","fortimanager_object_cli_template.Project","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-inbandwidth","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-outbandwidth","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region","fortimanager_object_fmg_variable.makeMetadata-shaping_profile"]},{"address":"fortimanager_object_cli_templategroup.Hub-Template","mode":"managed","type":"fortimanager_object_cli_templategroup","name":"Hub-Template","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"This is a Terraform example to build a CLI template group","id":"Hub-Template","member":["01-Hub-Underlay","02-Hub-Overlay","03-Hub-Routing","04-Hub-MultiRegion"],"modification_time":"","name":"Hub-Template","scopetype":"adom","variables":["hostname","inbandwidth","lan_ip_edu","lan_ip_fin","loopback","mpls_wan_ip","outbandwidth","profile","region","shaping_profile"]},"sensitive_values":{"member":[false,false,false,false],"variables":[false,false,false,false,false,false,false,false,false,false]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_cli_template.Edge-Overlay","fortimanager_object_cli_template.Edge-Routing","fortimanager_object_cli_template.Edge-Underlay","fortimanager_object_cli_template.Hub-MultiRegion","fortimanager_object_cli_template.Hub-Overlay","fortimanager_object_cli_template.Hub-Routing","fortimanager_object_cli_template.Hub-Underlay","fortimanager_object_cli_template.Project","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-inbandwidth","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-outbandwidth","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region","fortimanager_object_fmg_variable.makeMetadata-shaping_profile"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-hostname","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-hostname","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"authByTerraform"}],"dynamic_sort_subtable":"false","id":"hostname","name":"hostname","scopetype":"adom","value":"FGT"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-inbandwidth","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-inbandwidth","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"5"}],"dynamic_sort_subtable":"false","id":"inbandwidth","name":"inbandwidth","scopetype":"adom","value":"5"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-lan_ip_edu","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"10.0.0.1/24"}],"dynamic_sort_subtable":"false","id":"lan_ip_edu","name":"lan_ip_edu","scopetype":"adom","value":"10.0.0.1/24"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvm_cmd_update_device.refreshDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_json_generic_api.authDevice","fortimanager_json_generic_api.updateDeviceDB"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-lan_ip_fin","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"11.0.0.1/24"}],"dynamic_sort_subtable":"false","id":"lan_ip_fin","name":"lan_ip_fin","scopetype":"adom","value":"11.0.0.1/24"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-loopback","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-loopback","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"1.1.1.1/32"}],"dynamic_sort_subtable":"false","id":"loopback","name":"loopback","scopetype":"adom","value":"1.1.1.1/32"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-mpls_wan_gateway","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"2.2.2.2/32"}],"dynamic_sort_subtable":"false","id":"mpls_wan_gateway","name":"mpls_wan_gateway","scopetype":"adom","value":"2.2.2.2/32"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-inbandwidth","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-mpls_wan_ip","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"12.0.0.1/24"}],"dynamic_sort_subtable":"false","id":"mpls_wan_ip","name":"mpls_wan_ip","scopetype":"adom","value":"12.0.0.1/24"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-outbandwidth","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-outbandwidth","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"10"}],"dynamic_sort_subtable":"false","id":"outbandwidth","name":"outbandwidth","scopetype":"adom","value":"10"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-inbandwidth","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region","fortimanager_object_fmg_variable.makeMetadata-shaping_profile"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-profile","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-profile","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"Gold"}],"dynamic_sort_subtable":"false","id":"profile","name":"profile","scopetype":"adom","value":"Gold"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-region","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-region","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"Reagion Variable","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"West"}],"dynamic_sort_subtable":"false","id":"region","name":"region","scopetype":"adom","value":"East"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-profile"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-shaping_profile","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-shaping_profile","provider_name":"registry.terraform.io/fortinetdev/fortimanager","schema_version":0,"values":{"adom":"createdByTerraform","description":"","dynamic_mapping":[{"_scope":[{"name":"authByTerraform","vdom":"global"}],"value":"Silver"}],"dynamic_sort_subtable":"false","id":"shaping_profile","name":"shaping_profile","scopetype":"adom","value":"Silver"},"sensitive_values":{"dynamic_mapping":[{"_scope":[{}]}]},"depends_on":["fortimanager_dvm_cmd_add_device.authDevice","fortimanager_dvmdb_adom.manageADOM","fortimanager_exec_workspace_action.lockADOM","fortimanager_object_fmg_variable.makeMetadata-hostname","fortimanager_object_fmg_variable.makeMetadata-inbandwidth","fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","fortimanager_object_fmg_variable.makeMetadata-loopback","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","fortimanager_object_fmg_variable.makeMetadata-profile","fortimanager_object_fmg_variable.makeMetadata-region"]}]}}},"configuration":{"provider_config":{"fortimanager":{"name":"fortimanager","full_name":"registry.terraform.io/fortinetdev/fortimanager","version_constraint":"1.9.0","expressions":{"hostname":{"constant_value":"fm01.verja.no"},"insecure":{"constant_value":"true"},"logsession":{"constant_value":true},"presession":{"constant_value":""},"scopetype":{"constant_value":"adom"},"token":{"constant_value":"n8ru5gqzddqsypogz9g3ax87fg3j4sjz"},"username":{"constant_value":"api_user"}}},"random":{"name":"random","full_name":"registry.terraform.io/hashicorp/random","version_constraint":"3.5.1"}},"root_module":{"resources":[{"address":"fortimanager_dvm_cmd_add_device.authDevice","mode":"managed","type":"fortimanager_dvm_cmd_add_device","name":"authDevice","provider_config_key":"fortimanager","expressions":{"device":[{"adm_pass":{"references":["var.deviceInfo.adm_pass","var.deviceInfo"]},"adm_usr":{"references":["var.deviceInfo.adm_usr","var.deviceInfo"]},"deviceaction":{"constant_value":"promote_unreg"},"name":{"references":["var.deviceInfo.name","var.deviceInfo"]},"platform_str":{"references":["var.deviceInfo.platform_str","var.deviceInfo"]},"sn":{"references":["var.deviceInfo.sn","var.deviceInfo"]}}],"flags":{"constant_value":["create_task"]},"fmgadom":{"references":["var.workingADOM"]}},"schema_version":0,"depends_on":["fortimanager_exec_workspace_action.lockADOM"]},{"address":"fortimanager_dvmdb_adom.manageADOM","mode":"managed","type":"fortimanager_dvmdb_adom","name":"manageADOM","provider_config_key":"fortimanager","expressions":{"flags":{"constant_value":["no_vpn_console"]},"log_db_retention_hours":{"constant_value":1440},"log_disk_quota":{"constant_value":51200},"log_disk_quota_alert_thres":{"constant_value":90},"log_disk_quota_split_ratio":{"constant_value":70},"log_file_retention_hours":{"constant_value":8760},"mig_mr":{"constant_value":4},"mig_os_ver":{"constant_value":"0.0"},"mode":{"constant_value":"gms"},"mr":{"constant_value":4},"name":{"references":["var.workingADOM"]},"os_ver":{"constant_value":"7.0"},"restricted_prds":{"constant_value":["fos"]},"state":{"constant_value":1},"workspace_mode":{"constant_value":1}},"schema_version":0},{"address":"fortimanager_exec_workspace_action.lockADOM","mode":"managed","type":"fortimanager_exec_workspace_action","name":"lockADOM","provider_config_key":"fortimanager","expressions":{"action":{"constant_value":"lockbegin"},"adom":{"references":["var.workingADOM"]},"comment":{"constant_value":""},"force_recreate":{},"param":{"constant_value":""},"scopetype":{"constant_value":"adom"},"target":{"constant_value":""}},"schema_version":0,"depends_on":["fortimanager_dvmdb_adom.manageADOM"]},{"address":"fortimanager_exec_workspace_action.unlockADOM","mode":"managed","type":"fortimanager_exec_workspace_action","name":"unlockADOM","provider_config_key":"fortimanager","expressions":{"action":{"constant_value":"lockend"},"adom":{"references":["var.workingADOM"]},"comment":{"constant_value":""},"force_recreate":{},"param":{"constant_value":""},"scopetype":{"constant_value":"adom"},"target":{"constant_value":""}},"schema_version":0,"depends_on":["fortimanager_object_cli_templategroup.Edge-Template","fortimanager_object_cli_templategroup.Hub-Template"]},{"address":"fortimanager_json_generic_api.updateDeviceDB","mode":"managed","type":"fortimanager_json_generic_api","name":"updateDeviceDB","provider_config_key":"fortimanager","expressions":{"json_content":{"references":["var.deviceInfo.adm_pass","var.deviceInfo","var.deviceInfo.adm_usr","var.deviceInfo","var.deviceInfo.name","var.deviceInfo","var.workingADOM","var.deviceInfo.platform_str","var.deviceInfo"]}},"schema_version":0,"depends_on":["fortimanager_dvm_cmd_add_device.authDevice"]},{"address":"fortimanager_object_cli_template.Edge-Overlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Edge-Overlay","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":"This is a Terraform example to build a CLI Template"},"name":{"constant_value":"02-Edge-Overlay"},"scopetype":{"constant_value":"adom"},"script":{},"type":{"constant_value":"jinja"}},"schema_version":0,"depends_on":["fortimanager_object_cli_template.Hub-Underlay"]},{"address":"fortimanager_object_cli_template.Edge-Routing","mode":"managed","type":"fortimanager_object_cli_template","name":"Edge-Routing","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":"This is a Terraform example to build a CLI Template"},"name":{"constant_value":"03-Edge-Routing"},"scopetype":{"constant_value":"adom"},"script":{},"type":{"constant_value":"jinja"}},"schema_version":0,"depends_on":["fortimanager_object_cli_template.Hub-Overlay"]},{"address":"fortimanager_object_cli_template.Edge-Underlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Edge-Underlay","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":"This is a Terraform example to build a CLI Template"},"name":{"constant_value":"01-Edge-Underlay"},"scopetype":{"constant_value":"adom"},"script":{},"type":{"constant_value":"jinja"}},"schema_version":0,"depends_on":["fortimanager_object_cli_template.Project"]},{"address":"fortimanager_object_cli_template.Hub-MultiRegion","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-MultiRegion","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":"This is a Terraform example to build a CLI Template"},"name":{"constant_value":"04-Hub-MultiRegion"},"scopetype":{"constant_value":"adom"},"script":{},"type":{"constant_value":"jinja"}},"schema_version":0,"depends_on":["fortimanager_object_cli_template.Hub-Routing"]},{"address":"fortimanager_object_cli_template.Hub-Overlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-Overlay","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":"This is a Terraform example to build a CLI Template"},"name":{"constant_value":"02-Hub-Overlay"},"scopetype":{"constant_value":"adom"},"script":{},"type":{"constant_value":"jinja"}},"schema_version":0,"depends_on":["fortimanager_object_cli_template.Edge-Overlay"]},{"address":"fortimanager_object_cli_template.Hub-Routing","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-Routing","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":"This is a Terraform example to build a CLI Template"},"name":{"constant_value":"03-Hub-Routing"},"scopetype":{"constant_value":"adom"},"script":{},"type":{"constant_value":"jinja"}},"schema_version":0,"depends_on":["fortimanager_object_cli_template.Edge-Routing"]},{"address":"fortimanager_object_cli_template.Hub-Underlay","mode":"managed","type":"fortimanager_object_cli_template","name":"Hub-Underlay","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":"This is a Terraform example to build a CLI Template"},"name":{"constant_value":"01-Hub-Underlay"},"scopetype":{"constant_value":"adom"},"script":{},"type":{"constant_value":"jinja"}},"schema_version":0,"depends_on":["fortimanager_object_cli_template.Edge-Underlay"]},{"address":"fortimanager_object_cli_template.Project","mode":"managed","type":"fortimanager_object_cli_template","name":"Project","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":"This is a Terraform example to build a project"},"name":{"constant_value":"Project"},"scopetype":{"constant_value":"adom"},"script":{},"type":{"constant_value":"jinja"},"variables":{"references":["var.cli-template-project-variables"]}},"schema_version":0,"depends_on":["fortimanager_object_fmg_variable.makeMetadata-outbandwidth"]},{"address":"fortimanager_object_cli_templategroup.Edge-Template","mode":"managed","type":"fortimanager_object_cli_templategroup","name":"Edge-Template","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":"This is a Terraform example to build a CLI template group"},"member":{"constant_value":["01-Edge-Underlay","02-Edge-Overlay","03-Edge-Routing"]},"name":{"constant_value":"Edge-Template"},"scopetype":{"constant_value":"adom"}},"schema_version":0,"depends_on":["fortimanager_object_cli_template.Edge-Overlay","fortimanager_object_cli_template.Edge-Routing","fortimanager_object_cli_template.Edge-Underlay"]},{"address":"fortimanager_object_cli_templategroup.Hub-Template","mode":"managed","type":"fortimanager_object_cli_templategroup","name":"Hub-Template","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":"This is a Terraform example to build a CLI template group"},"member":{"constant_value":["01-Hub-Underlay","02-Hub-Overlay","03-Hub-Routing","04-Hub-MultiRegion"]},"name":{"constant_value":"Hub-Template"},"scopetype":{"constant_value":"adom"}},"schema_version":0,"depends_on":["fortimanager_object_cli_template.Hub-Overlay","fortimanager_object_cli_template.Hub-Routing","fortimanager_object_cli_template.Hub-Underlay","fortimanager_object_cli_template.Hub-MultiRegion"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-hostname","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-hostname","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":""},"dynamic_mapping":[{"_scope":[{"name":{"references":["var.deviceInfo.name","var.deviceInfo"]},"vdom":{"constant_value":"global"}}],"value":{"references":["var.deviceInfo.name","var.deviceInfo"]}}],"name":{"constant_value":"hostname"},"scopetype":{"constant_value":"adom"},"value":{"constant_value":"FGT"}},"schema_version":0,"depends_on":["fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-inbandwidth","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-inbandwidth","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":""},"dynamic_mapping":[{"_scope":[{"name":{"references":["var.deviceInfo.name","var.deviceInfo"]},"vdom":{"constant_value":"global"}}],"value":{"constant_value":"5"}}],"name":{"constant_value":"inbandwidth"},"scopetype":{"constant_value":"adom"},"value":{"constant_value":"5"}},"schema_version":0,"depends_on":["fortimanager_object_fmg_variable.makeMetadata-loopback"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-lan_ip_edu","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":""},"dynamic_mapping":[{"_scope":[{"name":{"references":["var.deviceInfo.name","var.deviceInfo"]},"vdom":{"constant_value":"global"}}],"value":{"constant_value":"10.0.0.1/20"}}],"name":{"constant_value":"lan_ip_edu"},"scopetype":{"constant_value":"adom"},"value":{"constant_value":"10.0.0.1/24"}},"schema_version":0,"depends_on":["fortimanager_dvm_cmd_add_device.authDevice"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-lan_ip_fin","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":""},"dynamic_mapping":[{"_scope":[{"name":{"references":["var.deviceInfo.name","var.deviceInfo"]},"vdom":{"constant_value":"global"}}],"value":{"constant_value":"11.0.0.1/24"}}],"name":{"constant_value":"lan_ip_fin"},"scopetype":{"constant_value":"adom"},"value":{"constant_value":"11.0.0.1/24"}},"schema_version":0,"depends_on":["fortimanager_object_fmg_variable.makeMetadata-lan_ip_edu"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-loopback","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-loopback","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":""},"dynamic_mapping":[{"_scope":[{"name":{"references":["var.deviceInfo.name","var.deviceInfo"]},"vdom":{"constant_value":"global"}}],"value":{"constant_value":"1.1.1.1/32"}}],"name":{"constant_value":"loopback"},"scopetype":{"constant_value":"adom"},"value":{"constant_value":"1.1.1.1/32"}},"schema_version":0,"depends_on":["fortimanager_object_fmg_variable.makeMetadata-region"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-mpls_wan_gateway","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":""},"dynamic_mapping":[{"_scope":[{"name":{"references":["var.deviceInfo.name","var.deviceInfo"]},"vdom":{"constant_value":"global"}}],"value":{"constant_value":"2.2.2.2/32"}}],"name":{"constant_value":"mpls_wan_gateway"},"scopetype":{"constant_value":"adom"},"value":{"constant_value":"2.2.2.2/32"}},"schema_version":0,"depends_on":["fortimanager_object_fmg_variable.makeMetadata-inbandwidth"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-mpls_wan_ip","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-mpls_wan_ip","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":""},"dynamic_mapping":[{"_scope":[{"name":{"references":["var.deviceInfo.name","var.deviceInfo"]},"vdom":{"constant_value":"global"}}],"value":{"constant_value":"12.0.0.1/24"}}],"name":{"constant_value":"mpls_wan_ip"},"scopetype":{"constant_value":"adom"},"value":{"constant_value":"12.0.0.1/24"}},"schema_version":0,"depends_on":["fortimanager_object_fmg_variable.makeMetadata-lan_ip_fin"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-outbandwidth","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-outbandwidth","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":""},"dynamic_mapping":[{"_scope":[{"name":{"references":["var.deviceInfo.name","var.deviceInfo"]},"vdom":{"constant_value":"global"}}],"value":{"constant_value":"10"}}],"name":{"constant_value":"outbandwidth"},"scopetype":{"constant_value":"adom"},"value":{"constant_value":"10"}},"schema_version":0,"depends_on":["fortimanager_object_fmg_variable.makeMetadata-shaping_profile"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-profile","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-profile","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":""},"dynamic_mapping":[{"_scope":[{"name":{"references":["var.deviceInfo.name","var.deviceInfo"]},"vdom":{"constant_value":"global"}}],"value":{"constant_value":"Gold"}}],"name":{"constant_value":"profile"},"scopetype":{"constant_value":"adom"},"value":{"constant_value":"Gold"}},"schema_version":0,"depends_on":["fortimanager_object_fmg_variable.makeMetadata-hostname"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-region","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-region","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":"Reagion Variable"},"dynamic_mapping":[{"_scope":[{"name":{"references":["var.deviceInfo.name","var.deviceInfo"]},"vdom":{"constant_value":"global"}}],"value":{"constant_value":"West"}}],"name":{"constant_value":"region"},"scopetype":{"constant_value":"adom"},"value":{"constant_value":"East"}},"schema_version":0,"depends_on":["fortimanager_object_fmg_variable.makeMetadata-profile"]},{"address":"fortimanager_object_fmg_variable.makeMetadata-shaping_profile","mode":"managed","type":"fortimanager_object_fmg_variable","name":"makeMetadata-shaping_profile","provider_config_key":"fortimanager","expressions":{"adom":{"references":["var.workingADOM"]},"description":{"constant_value":""},"dynamic_mapping":[{"_scope":[{"name":{"references":["var.deviceInfo.name","var.deviceInfo"]},"vdom":{"constant_value":"global"}}],"value":{"constant_value":"Silver"}}],"name":{"constant_value":"shaping_profile"},"scopetype":{"constant_value":"adom"},"value":{"constant_value":"Silver"}},"schema_version":0,"depends_on":["fortimanager_object_fmg_variable.makeMetadata-mpls_wan_gateway"]}],"variables":{"cli-template-project-variables":{"default":["lan_ip_edu","lan_ip_fin","mpls_wan_ip","hostname","profile","region","loopback","mpls_wan_gateway","inbandwidth","shaping_profile","outbandwidth"],"description":"Project Variables"},"createADOM":{},"createDevice":{},"deviceInfo":{},"pkg":{"default":"managedByTerraform","description":"Package Details"},"resource_tags":{"default":{"environment":"dev","project":"project-alpha"},"description":"Tags to set for all resources"},"workingADOM":{"default":"createdByTerraform","description":"ADOMs"}}}},"timestamp":"2023-10-20T11:37:30Z","errored":false}
