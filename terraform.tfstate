{
  "version": 4,
  "terraform_version": "1.5.7",
  "serial": 60,
  "lineage": "11bc1d59-a8af-6a0b-912b-36b0d7ee8fee",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "fortimanager_exec_workspace_action",
      "name": "lockres",
      "provider": "provider[\"registry.terraform.io/fortinetdev/fortimanager\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "action": "lockbegin",
            "adom": null,
            "comment": "",
            "force_recreate": "c010bd64-92d9-ece6-adea-5947b70c945c",
            "id": "workspaceactionadom.GNS3lock",
            "param": "",
            "scopetype": "inherit",
            "target": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "fortimanager_exec_workspace_action",
      "name": "unlockres",
      "provider": "provider[\"registry.terraform.io/fortinetdev/fortimanager\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "action": "lockend",
            "adom": null,
            "comment": "",
            "force_recreate": "6c717e31-8c81-6509-2ea8-088265488515",
            "id": "workspaceactionadom.GNS3unlock",
            "param": "",
            "scopetype": "inherit",
            "target": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "fortimanager_exec_workspace_action.lockres",
            "fortimanager_object_cli_template.Edge-Underlay",
            "fortimanager_object_cli_template.project"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "fortimanager_object_cli_template",
      "name": "Edge-Underlay",
      "provider": "provider[\"registry.terraform.io/fortinetdev/fortimanager\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "adom": null,
            "description": "This is a Terraform example to build a project",
            "id": "Edge-Underlay",
            "modification_time": "",
            "name": "Edge-Underlay",
            "provision": "",
            "scopetype": "inherit",
            "script": "{# 01-Edge-Underlay.j2                                                        #}\n{# Release: 7.2                                                               #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# -------------------------------------------------------------------------- #}\n{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}\n{# -------------------------------------------------------------------------- #}\n\n{% import 'Project' as project with context %}\n\n{% set pe_vrf = project.regions[region].pe_vrf|default(1) %}\n{% set vrf_leak_summary = project.vrf_leak_summary|default('10.200.255.0/24') %}\n\n{# General settings #}\nconfig system settings\n  set location-id {{ loopback|ipaddr('address') }}\n  set allow-subnet-overlap enable\nend\nconfig system global\n  {% if not project.profiles[profile].ha|default(false) and hostname is defined %}\n  set hostname {{ hostname }}\n  {% endif %}\nend\n\n{# Loop: Configure underlay interfaces #}\n{% for i in project.profiles[profile].interfaces if i.name is defined %}\nconfig system interface\n  edit \"{{i.name}}\"\n    {# IP #}\n    {% if i.ip is defined %}\n    {% if i.ip == 'dhcp' %}\n    set mode dhcp\n    {%  else %}\n    set mode static\n    set ip {{ i.ip }}\n    {% endif %}\n    {% endif %}\n\n    {# VRF #}\n    {% if i.vrf is defined %}\n    set vrf {{ i.vrf }}\n    {% else %}\n    set vrf {{ pe_vrf }}\n    {% endif %}\n\n    {# VLAN #}\n    {% if i.vlanid is defined and i.parent is defined %}\n    set vdom \"root\"\n    set type vlan\n    set vlanid {{ i.vlanid }}\n    set interface {{ i.parent }}\n    {% endif %}\n\n    {# FEX #}\n    {% if i.fex|default(false) %}\n    set type fext-wan\n    {% endif %}       \n\n    {# QoS: Add shaping profile and in/outbandwidth only if interface is of type wan and meta fields are both defined #}\n    {% if i.role == 'wan' and i.outbandwidth is defined %}\n    set estimated-upstream-bandwidth {{ i.outbandwidth }}\n      {% if i.shaping_profile is defined %}\n      set outbandwidth {{ i.outbandwidth }}\n      set egress-shaping-profile {{ i.shaping_profile }}\n      {% endif %}\n    {% endif %}\n    {% if i.role == 'wan' and i.inbandwidth is defined %}\n    set estimated-downstream-bandwidth {{ i.inbandwidth }}\n      {% if i.shaping_profile is defined %}\n      set inbandwidth {{ i.inbandwidth }}\n      set ingress-shaping-profile {{ i.shaping_profile }}\n      {% endif %}\n    {% endif %}\n\n    {# Other settings #}\n    {% if i.role == 'wan' %}\n    set role wan\n    {% endif %}\n    {% if i.role == 'lan' %}\n    set role lan\n    set device-identification enable\n    {% endif %}\n    set allowaccess {{ 'ping' if not i.access|default(false) else i.access }}\n  next\nend\n\n{# Configure FEX parent interface #}\n{% if i.fex|default(false) %}\nconfig system interface\n  edit {{ i.parent }}\n    set mode dhcp\n    set allowaccess ping fabric\n    set monitor-bandwidth enable\n    set role wan\n    unset lldp-reception      \n  next\nend\n{% endif %}\n\n{# VRF Leak #}\n{% if i.vrf is defined and i.allow_dia|default(false) %}\n  {# Configure software vdom-link interface if model is VM #}\n  {% if i.leak_npu_link|default('') == '' %}\n  config system vdom-link\n    edit \"vrf{{ i.vrf }}_leak\"\n    next\n  end\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vdom-link\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vdom-link\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {# Configure vlan interfaces on top of npu link if model is HW #}\n  {% else %}\n  config system interface\n    edit \"vrf{{ i.vrf }}_leak0\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}0\"\n      set vrf {{ pe_vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n    edit \"vrf{{ i.vrf }}_leak1\"\n      set type vlan\n      set vlanid {{ 4000 + i.vrf }}\n      set interface \"{{i.leak_npu_link}}1\"\n      set vrf {{ i.vrf }}\n      set vdom 'root'\n      set mode static\n      set ip {{ vrf_leak_summary|ipaddr((i.vrf * 2))|ipaddr('address') }}/31\n      set allowaccess ping\n    next\n  end\n  {% endif %}\n\n  {# Add default route to pe_vrf for each vrf #}\n  config router static\n    edit {{ 10000 + i.vrf }}\n      set gateway {{ vrf_leak_summary|ipaddr((i.vrf * 2 + 1))|ipaddr('address') }}\n      set device vrf{{ i.vrf }}_leak1\n    next\n  end\n\n  {# Configure a zone for easier policy management of vrf leaking #}\n  {% if project.create_vrf_leak_zone|default(true) and i.role == 'lan' %}\n  config system zone\n    edit \"{{ project.pevrf_leak_zone|default('pevrf_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak0\"\n    next\n    edit \"{{ project.vrf_leak_zone|default('vrfs_leak_zone') }}\"\n      append interface \"vrf{{ i.vrf }}_leak1\"\n    next\n  end\n  {% endif %}\n{% endif %}\n\n{# End Loop: Configure underlay interfaces #}\n{% endfor %}\n\n{# Main Loopback #}\nconfig system interface\n  edit \"Lo\"\n    set vdom \"root\"\n    set type loopback\n    set vrf {{ pe_vrf }}\n    set ip {{ loopback|ipaddr('address') }}/32\n    set allowaccess ping\n  next\nend\n\n{# Create LAN Zone #}\n{% set lan_intf = [] %}\n{% if project.create_lan_zone|default(true) %}\nconfig system zone\n  edit \"{{ project.lan_zone|default('lan_zone') }}\"\n    {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n    {{  lan_intf.append(i.name) or \"\" }}\n    {% endfor %}\n    set interface {{ lan_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Support SD-Branch (Fortilink interface) #}\n{% set fortilink_intf = [] %}\n{% for i in project.profiles[profile].interfaces if i.role == 'sd_branch' and i.name is defined %}\n{{  fortilink_intf.append(i.name) or \"\" }}\n{% endfor %}\n{% if fortilink_intf %}\nconfig system global\n  set switch-controller enable\nend\nconfig system interface\n  edit \"fortilink\"\n    set member {{ fortilink_intf|join(' ') }}\n  next\nend\n{% endif %}\n\n{# Enable DHCP Server on LAN interfaces #}\n{% if project.create_lan_dhcp_server|default(true) %}\nconfig system dhcp server\n  {% for i in project.profiles[profile].interfaces if i.role == 'lan' and i.name is defined %}\n  {% if i.dhcp_server|default(true) %}\n  edit {{ 10 + loop.index0 }}\n    set dns-service default\n    set default-gateway {{ i.ip|ipaddr('address') }}\n    set netmask {{ i.ip|ipaddr('netmask') }}\n    set interface {{ i.name }}\n    config ip-range\n      edit 1\n        set start-ip {{ i.ip|ipaddr(4)|ipaddr('address') }}\n        set end-ip {{ i.ip|ipaddr(-5)|ipaddr('address') }}\n      next\n    end\n  next\n  {% endif %}\n  {% endfor %}\nend\n{% endif %}\n",
            "type": "jinja",
            "variables": [
              "hostname",
              "inbandwidth",
              "lan_ip_edu",
              "lan_ip_fin",
              "loopback",
              "mpls_wan_ip",
              "outbandwidth",
              "profile",
              "region",
              "shaping_profile"
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "fortimanager_exec_workspace_action.lockres",
            "fortimanager_object_cli_template.project"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "fortimanager_object_cli_template",
      "name": "project",
      "provider": "provider[\"registry.terraform.io/fortinetdev/fortimanager\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "adom": null,
            "description": "This is a Terraform example to build a project",
            "id": "Project",
            "modification_time": "",
            "name": "Project",
            "provision": "",
            "scopetype": "inherit",
            "script": "{#                            Project Template                                #}\n{# -------------------------------------------------------------------------- #}\n{# This file describes the project: its Regions, Hubs and Device Profiles     #}\n{# Normally, this is the only file that needs to be edited between            #}\n{# different projects                                                         #}\n{# -------------------------------------------------------------------------- #}\n{# Design flavor: \"BGP on Loopback\" (Multi-VRF)                               #}\n{# Please contact your Fortinet representatives for more details              #}\n\n{#\n  Per-device variables used:\n  - Required:\n    - hostname\n    - loopback\n    - profile\n    - region\n    - lan_ip_edu\n    - lan_ip_fin\n    - mpls_wan_ip (whenever the profile includes MPLS link)\n    - mpls_wan_gateway (whenever the profile includes MPLS link)\n  - Optional:\n    - outbandwidth\n    - inbandwidth\n    - shaping_profile\n#}\n\n{# Optional Settings #}\n{% set multireg_advpn = true %}\n{% set cert_auth = false %}\n\n{#  Mandatory Global Definitions #}\n{% set lo_summary = '10.200.0.0/14' %}\n{% set lan_summary = '10.0.0.0/8' %}\n\n{# Regions #}\n{% set regions = {\n    'West': {\n      'as': '65001',\n      'lo_summary': '10.200.1.0/24',\n      'hubs': [ 'site1-H1', 'site1-H2' ],\n      'vrfs': [\n        {\n          'id': 11,\n          'lan_summary': '10.0.0.0/14'\n        },\n        {\n          'id': 12,\n          'lan_summary': '10.0.0.0/14'\n        }\n      ]\n    },\n    'East': {\n      'as': '65002',\n      'lo_summary': '10.200.2.0/24',\n      'hubs': [ 'site2-H1' ],\n      'vrfs': [\n        {\n          'id': 11,\n          'lan_summary': '10.4.0.0/14'\n        },\n        {\n          'id': 12,\n          'lan_summary': '10.4.0.0/14'\n        }\n      ]\n    }\n  }\n%}\n\n{# Device Profiles #}\n{% set profiles = {\n\n    'Silver': {\n      'interfaces': [\n        {\n          'name': 'port1',\n          'role': 'wan',\n          'ol_type': 'ISP1',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'shaping_profile': shaping_profile,\n          'dia': true\n        },\n        {\n          'name': 'port2',\n          'role': 'wan',\n          'ol_type': 'MPLS',\n          'ip': mpls_wan_ip,\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'shaping_profile': shaping_profile\n        },\n        {\n          'name': 'port3',\n          'role': 'lan',\n          'vrf': 11,\n          'allow_dia': true,\n          'ip': lan_ip_edu\n        },\n        {\n          'name': 'port4',\n          'role': 'lan',\n          'vrf': 12,\n          'ip': lan_ip_fin\n        }\n      ]\n    },\n\n    'Gold': {\n      'interfaces': [\n        {\n          'name': 'port1',\n          'role': 'wan',\n          'ol_type': 'ISP1',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'dia': true\n        },\n        {\n          'name': 'port2',\n          'role': 'wan',\n          'ol_type': 'ISP2',\n          'ip': 'dhcp',\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth,\n          'dia': true\n        },\n        {\n          'name': 'port3',\n          'role': 'wan',\n          'ol_type': 'MPLS',\n          'ip': mpls_wan_ip,\n          'outbandwidth': outbandwidth,\n          'inbandwidth': inbandwidth\n        },\n        {\n          'name': 'port4',\n          'role': 'lan',\n          'vrf': 11,\n          'allow_dia': true,\n          'ip': lan_ip_edu\n        },\n        {\n          'name': 'port5',\n          'role': 'lan',\n          'vrf': 12,\n          'ip': lan_ip_fin\n        }\n      ]\n    }\n\n  }\n%}\n\n{# Hubs #}\n{% set hubs = {\n\n    'site1-H1': {\n      'lo_bgp': '10.200.1.253',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.1.1',\n          'network_id': '11'\n        },\n        'ISP2': {\n          'wan_ip': '100.64.1.9',\n          'network_id': '12'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.1.5',\n          'network_id': '13'\n        }\n      }\n    },\n\n    'site1-H2': {\n      'lo_bgp': '10.200.1.254',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.2.1',\n          'network_id': '21'\n        },\n        'ISP2': {\n          'wan_ip': '100.64.2.9',\n          'network_id': '22'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.2.5',\n          'network_id': '23'\n        }\n      }\n    },\n\n    'site2-H1': {\n      'lo_bgp': '10.200.2.253',\n      'overlays': {\n        'ISP1': {\n          'wan_ip': '100.64.4.1',\n          'network_id': '41'\n        },\n        'MPLS': {\n          'wan_ip': '172.16.4.5',\n          'network_id': '43'\n        }\n      }\n    }\n\n  }\n%}",
            "type": "jinja",
            "variables": [
              "inbandwidth",
              "lan_ip_edu",
              "lan_ip_fin",
              "mpls_wan_ip",
              "outbandwidth",
              "shaping_profile"
            ]
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "fortimanager_exec_workspace_action.lockres"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
